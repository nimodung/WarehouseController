
WarehouseController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00001884  00001918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000218  008001d0  008001d0  000019e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a55  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebf  00000000  00000000  00003679  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001216  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00005750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  00005bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e5e  00000000  00000000  00006347  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000071a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e8       	ldi	r30, 0x84	; 132
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3d       	cpi	r26, 0xD0	; 208
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a0 ed       	ldi	r26, 0xD0	; 208
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3e       	cpi	r26, 0xE8	; 232
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 90 02 	call	0x520	; 0x520 <main>
      9e:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
#include "Uart.h"
#include "ADC.h"

void ADC_init(void)
{
	ADMUX |= (1 << REFS0); //Voltage Reference Selection : AVCC with external capacitor at AREF pin
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC enable, prescaler 128분주
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	87 68       	ori	r24, 0x87	; 135
      b8:	80 83       	st	Z, r24
      ba:	08 95       	ret

000000bc <ADC_converting_value>:

int ADC_converting_value(char channel)
{
	int value = 0;
	
	ADMUX &= 0b11110000; //Analog Channel Selection Bits 초기화
      bc:	ec e7       	ldi	r30, 0x7C	; 124
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	90 81       	ld	r25, Z
      c2:	90 7f       	andi	r25, 0xF0	; 240
      c4:	90 83       	st	Z, r25
	ADMUX |= channel; //채널 설정
      c6:	90 81       	ld	r25, Z
      c8:	89 2b       	or	r24, r25
      ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      cc:	8f e1       	ldi	r24, 0x1F	; 31
      ce:	93 e0       	ldi	r25, 0x03	; 3
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_converting_value+0x14>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <ADC_converting_value+0x1a>
      d6:	00 00       	nop
	_delay_us(200); //제대로 동작하는데 약간의 시간 필요
	
	ADCSRA |= (1 << ADSC); //Start Conversion //When the conversion is complete, it returns to zero
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
	while(!(ADCSRA  & (1 << ADIF))); //ADIF : conversing 이 완료되면 set //ADIF가 0인동안 기다려주기
      e2:	80 81       	ld	r24, Z
      e4:	84 ff       	sbrs	r24, 4
      e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_converting_value+0x26>
		/* //컴파일러 문제인듯 // 수식에는 문제 없으나 변경되는 값이 출력안됨
			value = ADCH;
			value <<= 8;
			value += ADCL;  //value |= ADCL; 
		*/
	value = ADCL + ADCH * 256;
      e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ec:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	value = (value + 1) * 500.0 / 1024 + 3; //+3 : 오차 보정 //5 * 100 / 1024 : 0 ~ 5V 사이의 값 , 소숫점을 위해서 *100
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	76 2f       	mov	r23, r22
      f4:	66 27       	eor	r22, r22
      f6:	68 0f       	add	r22, r24
      f8:	71 1d       	adc	r23, r1
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	7f 4f       	sbci	r23, 0xFF	; 255
      fe:	07 2e       	mov	r0, r23
     100:	00 0c       	add	r0, r0
     102:	88 0b       	sbc	r24, r24
     104:	99 0b       	sbc	r25, r25
     106:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	4a ef       	ldi	r20, 0xFA	; 250
     110:	53 e4       	ldi	r21, 0x43	; 67
     112:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5a e3       	ldi	r21, 0x3A	; 58
     11e:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e4       	ldi	r20, 0x40	; 64
     128:	50 e4       	ldi	r21, 0x40	; 64
     12a:	0e 94 91 05 	call	0xb22	; 0xb22 <__addsf3>
	
	return value;
     12e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixsfsi>
}
     132:	cb 01       	movw	r24, r22
     134:	08 95       	ret

00000136 <Volt_to_temperature>:

int Volt_to_temperature(int value)
{
	int temp = value * 11 / 50 - 30;
	
	return temp;
     136:	2b e0       	ldi	r18, 0x0B	; 11
     138:	ac 01       	movw	r20, r24
     13a:	24 9f       	mul	r18, r20
     13c:	c0 01       	movw	r24, r0
     13e:	25 9f       	mul	r18, r21
     140:	90 0d       	add	r25, r0
     142:	11 24       	eor	r1, r1
     144:	62 e3       	ldi	r22, 0x32	; 50
     146:	70 e0       	ldi	r23, 0x00	; 0
     148:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     14c:	cb 01       	movw	r24, r22
     14e:	4e 97       	sbiw	r24, 0x1e	; 30
     150:	08 95       	ret

00000152 <FND_shift_out>:
     152:	44 98       	cbi	0x08, 4	; 8
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	68 2f       	mov	r22, r24
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	45 98       	cbi	0x08, 5	; 8
     15e:	43 98       	cbi	0x08, 3	; 8
     160:	98 b1       	in	r25, 0x08	; 8
     162:	9b 01       	movw	r18, r22
     164:	04 2e       	mov	r0, r20
     166:	02 c0       	rjmp	.+4      	; 0x16c <FND_shift_out+0x1a>
     168:	35 95       	asr	r19
     16a:	27 95       	ror	r18
     16c:	0a 94       	dec	r0
     16e:	e2 f7       	brpl	.-8      	; 0x168 <FND_shift_out+0x16>
     170:	21 70       	andi	r18, 0x01	; 1
     172:	33 27       	eor	r19, r19
     174:	22 0f       	add	r18, r18
     176:	33 1f       	adc	r19, r19
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	22 0f       	add	r18, r18
     17e:	33 1f       	adc	r19, r19
     180:	29 2b       	or	r18, r25
     182:	28 b9       	out	0x08, r18	; 8
     184:	45 9a       	sbi	0x08, 5	; 8
     186:	4f 5f       	subi	r20, 0xFF	; 255
     188:	5f 4f       	sbci	r21, 0xFF	; 255
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	31 f7       	brne	.-52     	; 0x15c <FND_shift_out+0xa>
     190:	44 9a       	sbi	0x08, 4	; 8
     192:	08 95       	ret

00000194 <FND_update_value>:
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	ec 01       	movw	r28, r24
     19a:	e7 ed       	ldi	r30, 0xD7	; 215
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	2a e0       	ldi	r18, 0x0A	; 10
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	b9 01       	movw	r22, r18
     1a4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     1a8:	dc 01       	movw	r26, r24
     1aa:	a6 5f       	subi	r26, 0xF6	; 246
     1ac:	be 4f       	sbci	r27, 0xFE	; 254
     1ae:	8c 91       	ld	r24, X
     1b0:	80 83       	st	Z, r24
     1b2:	cb 01       	movw	r24, r22
     1b4:	b9 01       	movw	r22, r18
     1b6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     1ba:	dc 01       	movw	r26, r24
     1bc:	a6 5f       	subi	r26, 0xF6	; 246
     1be:	be 4f       	sbci	r27, 0xFE	; 254
     1c0:	8c 91       	ld	r24, X
     1c2:	81 83       	std	Z+1, r24	; 0x01
     1c4:	ce 01       	movw	r24, r28
     1c6:	64 e6       	ldi	r22, 0x64	; 100
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     1ce:	cb 01       	movw	r24, r22
     1d0:	b9 01       	movw	r22, r18
     1d2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     1d6:	dc 01       	movw	r26, r24
     1d8:	a6 5f       	subi	r26, 0xF6	; 246
     1da:	be 4f       	sbci	r27, 0xFE	; 254
     1dc:	8c 91       	ld	r24, X
     1de:	82 83       	std	Z+2, r24	; 0x02
     1e0:	ce 01       	movw	r24, r28
     1e2:	68 ee       	ldi	r22, 0xE8	; 232
     1e4:	73 e0       	ldi	r23, 0x03	; 3
     1e6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     1ea:	cb 01       	movw	r24, r22
     1ec:	b9 01       	movw	r22, r18
     1ee:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divmodhi4>
     1f2:	dc 01       	movw	r26, r24
     1f4:	a6 5f       	subi	r26, 0xF6	; 246
     1f6:	be 4f       	sbci	r27, 0xFE	; 254
     1f8:	8c 91       	ld	r24, X
     1fa:	83 83       	std	Z+3, r24	; 0x03
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <FND4digit_init_shiftR>:
     202:	8a b1       	in	r24, 0x0a	; 10
     204:	80 6f       	ori	r24, 0xF0	; 240
     206:	8a b9       	out	0x0a, r24	; 10
     208:	8b b1       	in	r24, 0x0b	; 11
     20a:	8f 70       	andi	r24, 0x0F	; 15
     20c:	8b b9       	out	0x0b, r24	; 11
     20e:	87 b1       	in	r24, 0x07	; 7
     210:	88 63       	ori	r24, 0x38	; 56
     212:	87 b9       	out	0x07, r24	; 7
     214:	44 9a       	sbi	0x08, 4	; 8
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 ca 00 	call	0x194	; 0x194 <FND_update_value>
     21e:	08 95       	ret

00000220 <Keypad_init>:

void Keypad_init(void)
{
	//Keypad_PORT_DDR |= 0b00000111; //포트D 하위 3bit 출력으로 설정
	//Keypad_PORT |= 0b00000111; // 하위 3bit 끄고 시작(풀업저항)
	Keypad_PIN_DDR &= 0b11110000; //포트B 하위 4bit 입력으로 설정
     220:	84 b1       	in	r24, 0x04	; 4
     222:	80 7f       	andi	r24, 0xF0	; 240
     224:	84 b9       	out	0x04, r24	; 4
	Keypad_PIN_PORT |= 0b00001111;
     226:	85 b1       	in	r24, 0x05	; 5
     228:	8f 60       	ori	r24, 0x0F	; 15
     22a:	85 b9       	out	0x05, r24	; 5
     22c:	08 95       	ret

0000022e <Keyscan_sub>:
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000001)) return 1; //키가 눌렸을때
     22e:	18 9b       	sbis	0x03, 0	; 3
     230:	08 c0       	rjmp	.+16     	; 0x242 <Keyscan_sub+0x14>
	else if(!(Keypad_PIN & 0b00000010)) return 2;
     232:	19 9b       	sbis	0x03, 1	; 3
     234:	08 c0       	rjmp	.+16     	; 0x246 <Keyscan_sub+0x18>
	else if(!(Keypad_PIN & 0b00000100)) return 3;
     236:	1a 9b       	sbis	0x03, 2	; 3
     238:	08 c0       	rjmp	.+16     	; 0x24a <Keyscan_sub+0x1c>
	else if(!(Keypad_PIN & 0b00001000)) return 4;
     23a:	1b 9b       	sbis	0x03, 3	; 3
     23c:	08 c0       	rjmp	.+16     	; 0x24e <Keyscan_sub+0x20>
	else return 0;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	08 95       	ret
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000001)) return 1; //키가 눌렸을때
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	08 95       	ret
	else if(!(Keypad_PIN & 0b00000010)) return 2;
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	08 95       	ret
	else if(!(Keypad_PIN & 0b00000100)) return 3;
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	08 95       	ret
	else if(!(Keypad_PIN & 0b00001000)) return 4;
     24e:	84 e0       	ldi	r24, 0x04	; 4
	else return 0;
}
     250:	08 95       	ret

00000252 <StorageController_Init>:
    }
}

void StorageController_Init(void) {
	
	Timer0_init();
     252:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Timer0_init>
	FND4digit_init_shiftR();
     256:	0e 94 01 01 	call	0x202	; 0x202 <FND4digit_init_shiftR>
	
	Keypad_init();
     25a:	0e 94 10 01 	call	0x220	; 0x220 <Keypad_init>
	ADC_init();
     25e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	UART0_init(9600);
     262:	60 e8       	ldi	r22, 0x80	; 128
     264:	75 e2       	ldi	r23, 0x25	; 37
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 57 05 	call	0xaae	; 0xaae <UART0_init>
	
	DDRD |= 1 << ROOM1_LED; //LED RED
     26e:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &= ~(1 << ROOM1_LED);
     270:	5b 98       	cbi	0x0b, 3	; 11
	DDRB |= 1 << ROOM3_LED | 1 << ROOM2_LED; //LED BLUE , LED org
     272:	84 b1       	in	r24, 0x04	; 4
     274:	80 63       	ori	r24, 0x30	; 48
     276:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << ROOM3_LED | 1 << ROOM2_LED);
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	8f 7c       	andi	r24, 0xCF	; 207
     27c:	85 b9       	out	0x05, r24	; 5
	
	
	sei();
     27e:	78 94       	sei
     280:	08 95       	ret

00000282 <printFND_temper>:
	}
	printf("desire_temp : %d %d %d\n", room1_desire, room2_desire, room3_desire);
	return;
}

void printFND_temper(int temp, int room_number) {
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	eb 01       	movw	r28, r22
	
	
	if(temp >= 0) {
     288:	99 23       	and	r25, r25
     28a:	34 f0       	brlt	.+12     	; 0x298 <printFND_temper+0x16>
		FND_update_value(temp);
     28c:	0e 94 ca 00 	call	0x194	; 0x194 <FND_update_value>
		FND[2] = 255;
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <FND+0x2>
     296:	08 c0       	rjmp	.+16     	; 0x2a8 <printFND_temper+0x26>
		//FND[3] = FND4digit_font[COOLING];
	}
	else{
		//temp = temp * -1; //양수 값으로 변경
		FND_update_value(temp * -1);
     298:	91 95       	neg	r25
     29a:	81 95       	neg	r24
     29c:	91 09       	sbc	r25, r1
     29e:	0e 94 ca 00 	call	0x194	; 0x194 <FND_update_value>
		FND[2] = ~(1 << FND_g);
     2a2:	8d ef       	ldi	r24, 0xFD	; 253
     2a4:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <FND+0x2>
		//FND[3] = FND4digit_font[COOLING];
	}
	if(room_number == ROOM1) FND[3] = FND4digit_font[ROOM1];
     2a8:	c1 30       	cpi	r28, 0x01	; 1
     2aa:	d1 05       	cpc	r29, r1
     2ac:	29 f4       	brne	.+10     	; 0x2b8 <printFND_temper+0x36>
     2ae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <FND4digit_font+0x1>
     2b2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <FND+0x3>
     2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <printFND_temper+0x52>
	else if(room_number == ROOM2) FND[3] = FND4digit_font[ROOM2];
     2b8:	c2 30       	cpi	r28, 0x02	; 2
     2ba:	d1 05       	cpc	r29, r1
     2bc:	29 f4       	brne	.+10     	; 0x2c8 <printFND_temper+0x46>
     2be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <FND4digit_font+0x2>
     2c2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <FND+0x3>
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <printFND_temper+0x52>
	else if(room_number == ROOM3) FND[3] = FND4digit_font[ROOM3];
     2c8:	23 97       	sbiw	r28, 0x03	; 3
     2ca:	21 f4       	brne	.+8      	; 0x2d4 <printFND_temper+0x52>
     2cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <FND4digit_font+0x3>
     2d0:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <FND+0x3>
	
	return;
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <SelectRoomProcess>:
	return;
}

void SelectRoomProcess(){
	
	selected_room++;
     2da:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <selected_room>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <selected_room>
	if(selected_room > ROOM3) selected_room = ROOM1;
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	20 f0       	brcs	.+8      	; 0x2f0 <SelectRoomProcess+0x16>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <selected_room>
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <SelectRoomProcess+0x1a>
	
	if(selected_room == ROOM1) printFND_temper(room1_current, ROOM1);
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	51 f4       	brne	.+20     	; 0x308 <SelectRoomProcess+0x2e>
     2f4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <room1_current>
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
     306:	08 95       	ret
	else if(selected_room == ROOM2) printFND_temper(room2_current, ROOM2);
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	51 f4       	brne	.+20     	; 0x320 <SelectRoomProcess+0x46>
     30c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <room2_current>
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	08 2e       	mov	r0, r24
     316:	00 0c       	add	r0, r0
     318:	99 0b       	sbc	r25, r25
     31a:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
     31e:	08 95       	ret
	else if(selected_room == ROOM3) printFND_temper(room3_current, ROOM3);
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	49 f4       	brne	.+18     	; 0x336 <SelectRoomProcess+0x5c>
     324:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <room3_current>
     328:	63 e0       	ldi	r22, 0x03	; 3
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	08 2e       	mov	r0, r24
     32e:	00 0c       	add	r0, r0
     330:	99 0b       	sbc	r25, r25
     332:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
     336:	08 95       	ret

00000338 <TemperIncreaseProcess>:
	
	return;
}

void TemperIncreaseProcess(char room) {
	switch(room){
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	c9 f0       	breq	.+50     	; 0x36e <TemperIncreaseProcess+0x36>
     33c:	83 30       	cpi	r24, 0x03	; 3
     33e:	61 f1       	breq	.+88     	; 0x398 <TemperIncreaseProcess+0x60>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	f1 f5       	brne	.+124    	; 0x3c0 <TemperIncreaseProcess+0x88>
		case ROOM1: 
			room1_desire++;
     344:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     348:	8f 5f       	subi	r24, 0xFF	; 255
			if(room1_desire >= 30) room1_desire = 30;
     34a:	8e 31       	cpi	r24, 0x1E	; 30
     34c:	1c f4       	brge	.+6      	; 0x354 <TemperIncreaseProcess+0x1c>
}

void TemperIncreaseProcess(char room) {
	switch(room){
		case ROOM1: 
			room1_desire++;
     34e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <room1_desire>
     352:	03 c0       	rjmp	.+6      	; 0x35a <TemperIncreaseProcess+0x22>
			if(room1_desire >= 30) room1_desire = 30;
     354:	8e e1       	ldi	r24, 0x1E	; 30
     356:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <room1_desire>
			printFND_temper(room1_desire, ROOM1);
     35a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	08 2e       	mov	r0, r24
     364:	00 0c       	add	r0, r0
     366:	99 0b       	sbc	r25, r25
     368:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
			
			break;
     36c:	29 c0       	rjmp	.+82     	; 0x3c0 <TemperIncreaseProcess+0x88>
		case ROOM2: room2_desire++;
     36e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     372:	8f 5f       	subi	r24, 0xFF	; 255
			if(room2_desire >= 30) room2_desire = 30;
     374:	8e 31       	cpi	r24, 0x1E	; 30
     376:	1c f4       	brge	.+6      	; 0x37e <TemperIncreaseProcess+0x46>
			room1_desire++;
			if(room1_desire >= 30) room1_desire = 30;
			printFND_temper(room1_desire, ROOM1);
			
			break;
		case ROOM2: room2_desire++;
     378:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <room2_desire>
     37c:	03 c0       	rjmp	.+6      	; 0x384 <TemperIncreaseProcess+0x4c>
			if(room2_desire >= 30) room2_desire = 30;
     37e:	8e e1       	ldi	r24, 0x1E	; 30
     380:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <room2_desire>
			printFND_temper(room2_desire, ROOM2);
     384:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     388:	62 e0       	ldi	r22, 0x02	; 2
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	08 2e       	mov	r0, r24
     38e:	00 0c       	add	r0, r0
     390:	99 0b       	sbc	r25, r25
     392:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
		
			break;
     396:	14 c0       	rjmp	.+40     	; 0x3c0 <TemperIncreaseProcess+0x88>
		case ROOM3: room3_desire++;
     398:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     39c:	8f 5f       	subi	r24, 0xFF	; 255
			if(room3_desire >= 30) room3_desire = 30;
     39e:	8e 31       	cpi	r24, 0x1E	; 30
     3a0:	1c f4       	brge	.+6      	; 0x3a8 <TemperIncreaseProcess+0x70>
		case ROOM2: room2_desire++;
			if(room2_desire >= 30) room2_desire = 30;
			printFND_temper(room2_desire, ROOM2);
		
			break;
		case ROOM3: room3_desire++;
     3a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <room3_desire>
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <TemperIncreaseProcess+0x76>
			if(room3_desire >= 30) room3_desire = 30;
     3a8:	8e e1       	ldi	r24, 0x1E	; 30
     3aa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <room3_desire>
			printFND_temper(room3_desire, ROOM3);
     3ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     3b2:	63 e0       	ldi	r22, 0x03	; 3
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	08 2e       	mov	r0, r24
     3b8:	00 0c       	add	r0, r0
     3ba:	99 0b       	sbc	r25, r25
     3bc:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
			
			break;
	}
	printf("desire_temp : %d %d %d\n", room1_desire, room2_desire, room3_desire);
     3c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     3c4:	28 2f       	mov	r18, r24
     3c6:	08 2e       	mov	r0, r24
     3c8:	00 0c       	add	r0, r0
     3ca:	33 0b       	sbc	r19, r19
     3cc:	3f 93       	push	r19
     3ce:	8f 93       	push	r24
     3d0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     3d4:	28 2f       	mov	r18, r24
     3d6:	08 2e       	mov	r0, r24
     3d8:	00 0c       	add	r0, r0
     3da:	33 0b       	sbc	r19, r19
     3dc:	3f 93       	push	r19
     3de:	8f 93       	push	r24
     3e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     3e4:	28 2f       	mov	r18, r24
     3e6:	08 2e       	mov	r0, r24
     3e8:	00 0c       	add	r0, r0
     3ea:	33 0b       	sbc	r19, r19
     3ec:	3f 93       	push	r19
     3ee:	8f 93       	push	r24
     3f0:	88 e1       	ldi	r24, 0x18	; 24
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	9f 93       	push	r25
     3f6:	8f 93       	push	r24
     3f8:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
	return;
     3fc:	8d b7       	in	r24, 0x3d	; 61
     3fe:	9e b7       	in	r25, 0x3e	; 62
     400:	08 96       	adiw	r24, 0x08	; 8
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	9e bf       	out	0x3e, r25	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	8d bf       	out	0x3d, r24	; 61
     40c:	08 95       	ret

0000040e <TemperDecreaseProcess>:
}

void TemperDecreaseProcess(char room){
	switch(selected_room){
     40e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <selected_room>
     412:	82 30       	cpi	r24, 0x02	; 2
     414:	c9 f0       	breq	.+50     	; 0x448 <TemperDecreaseProcess+0x3a>
     416:	83 30       	cpi	r24, 0x03	; 3
     418:	61 f1       	breq	.+88     	; 0x472 <TemperDecreaseProcess+0x64>
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	f1 f5       	brne	.+124    	; 0x49a <TemperDecreaseProcess+0x8c>
		case ROOM1: room1_desire--;
     41e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     422:	81 50       	subi	r24, 0x01	; 1
			if(room1_desire <= -30) room1_desire = -30;
     424:	83 3e       	cpi	r24, 0xE3	; 227
     426:	1c f0       	brlt	.+6      	; 0x42e <TemperDecreaseProcess+0x20>
	return;
}

void TemperDecreaseProcess(char room){
	switch(selected_room){
		case ROOM1: room1_desire--;
     428:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <room1_desire>
     42c:	03 c0       	rjmp	.+6      	; 0x434 <TemperDecreaseProcess+0x26>
			if(room1_desire <= -30) room1_desire = -30;
     42e:	82 ee       	ldi	r24, 0xE2	; 226
     430:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <room1_desire>
			printFND_temper(room1_desire, ROOM1);
     434:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	08 2e       	mov	r0, r24
     43e:	00 0c       	add	r0, r0
     440:	99 0b       	sbc	r25, r25
     442:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
		
			break;
     446:	29 c0       	rjmp	.+82     	; 0x49a <TemperDecreaseProcess+0x8c>
		case ROOM2: room2_desire--;
     448:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     44c:	81 50       	subi	r24, 0x01	; 1
			if(room2_desire <= -30) room2_desire = -30;
     44e:	83 3e       	cpi	r24, 0xE3	; 227
     450:	1c f0       	brlt	.+6      	; 0x458 <TemperDecreaseProcess+0x4a>
		case ROOM1: room1_desire--;
			if(room1_desire <= -30) room1_desire = -30;
			printFND_temper(room1_desire, ROOM1);
		
			break;
		case ROOM2: room2_desire--;
     452:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <room2_desire>
     456:	03 c0       	rjmp	.+6      	; 0x45e <TemperDecreaseProcess+0x50>
			if(room2_desire <= -30) room2_desire = -30;
     458:	82 ee       	ldi	r24, 0xE2	; 226
     45a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <room2_desire>
			printFND_temper(room2_desire, ROOM2);
     45e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	08 2e       	mov	r0, r24
     468:	00 0c       	add	r0, r0
     46a:	99 0b       	sbc	r25, r25
     46c:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
			
			break;
     470:	14 c0       	rjmp	.+40     	; 0x49a <TemperDecreaseProcess+0x8c>
		case ROOM3: room3_desire--;
     472:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     476:	81 50       	subi	r24, 0x01	; 1
			if(room3_desire <= -30) room3_desire = -30;
     478:	83 3e       	cpi	r24, 0xE3	; 227
     47a:	1c f0       	brlt	.+6      	; 0x482 <TemperDecreaseProcess+0x74>
		case ROOM2: room2_desire--;
			if(room2_desire <= -30) room2_desire = -30;
			printFND_temper(room2_desire, ROOM2);
			
			break;
		case ROOM3: room3_desire--;
     47c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <room3_desire>
     480:	03 c0       	rjmp	.+6      	; 0x488 <TemperDecreaseProcess+0x7a>
			if(room3_desire <= -30) room3_desire = -30;
     482:	82 ee       	ldi	r24, 0xE2	; 226
     484:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <room3_desire>
			printFND_temper(room3_desire, ROOM3);
     488:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     48c:	63 e0       	ldi	r22, 0x03	; 3
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	08 2e       	mov	r0, r24
     492:	00 0c       	add	r0, r0
     494:	99 0b       	sbc	r25, r25
     496:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
			
			break;
	}
	printf("desire_temp : %d %d %d\n", room1_desire, room2_desire, room3_desire);
     49a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     49e:	28 2f       	mov	r18, r24
     4a0:	08 2e       	mov	r0, r24
     4a2:	00 0c       	add	r0, r0
     4a4:	33 0b       	sbc	r19, r19
     4a6:	3f 93       	push	r19
     4a8:	8f 93       	push	r24
     4aa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     4ae:	28 2f       	mov	r18, r24
     4b0:	08 2e       	mov	r0, r24
     4b2:	00 0c       	add	r0, r0
     4b4:	33 0b       	sbc	r19, r19
     4b6:	3f 93       	push	r19
     4b8:	8f 93       	push	r24
     4ba:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     4be:	28 2f       	mov	r18, r24
     4c0:	08 2e       	mov	r0, r24
     4c2:	00 0c       	add	r0, r0
     4c4:	33 0b       	sbc	r19, r19
     4c6:	3f 93       	push	r19
     4c8:	8f 93       	push	r24
     4ca:	88 e1       	ldi	r24, 0x18	; 24
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
	return;
     4d6:	8d b7       	in	r24, 0x3d	; 61
     4d8:	9e b7       	in	r25, 0x3e	; 62
     4da:	08 96       	adiw	r24, 0x08	; 8
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	9e bf       	out	0x3e, r25	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	8d bf       	out	0x3d, r24	; 61
     4e6:	08 95       	ret

000004e8 <CompareTemper>:
	return;
}

void CompareTemper(){
	
	if(room1_current > room1_desire) //RED
     4e8:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <room1_current>
     4ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     4f0:	89 17       	cp	r24, r25
     4f2:	14 f4       	brge	.+4      	; 0x4f8 <CompareTemper+0x10>
		PORTD |= 1 << ROOM1_LED;
     4f4:	5b 9a       	sbi	0x0b, 3	; 11
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <CompareTemper+0x12>
	else
		PORTD &= ~(1 << ROOM1_LED);
     4f8:	5b 98       	cbi	0x0b, 3	; 11
	
	if(room2_current > room2_desire) //orange
     4fa:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <room2_current>
     4fe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     502:	89 17       	cp	r24, r25
     504:	14 f4       	brge	.+4      	; 0x50a <CompareTemper+0x22>
		PORTB |= 1 << ROOM2_LED;
     506:	2c 9a       	sbi	0x05, 4	; 5
     508:	01 c0       	rjmp	.+2      	; 0x50c <CompareTemper+0x24>
	else 
		PORTB &= ~(1 << ROOM2_LED);
     50a:	2c 98       	cbi	0x05, 4	; 5
		
	if(room3_current > room3_desire) //BLUE
     50c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <room3_current>
     510:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     514:	89 17       	cp	r24, r25
     516:	14 f4       	brge	.+4      	; 0x51c <CompareTemper+0x34>
		PORTB |= 1 << ROOM3_LED;
     518:	2d 9a       	sbi	0x05, 5	; 5
     51a:	08 95       	ret
	else
		PORTB &= ~(1 << ROOM3_LED);
     51c:	2d 98       	cbi	0x05, 5	; 5
     51e:	08 95       	ret

00000520 <main>:

int main(void)
{
	char cmd_idx = 0;
	char *command;
   StorageController_Init();
     520:	0e 94 29 01 	call	0x252	; 0x252 <StorageController_Init>

char long_key_flag;

int main(void)
{
	char cmd_idx = 0;
     524:	71 2c       	mov	r7, r1
			
			room3_current = Volt_to_temperature(ADC_converting_value(0));
			if(room3_current <= -30) room3_current = -30;
			else if(room3_current >=  30) room3_current = 30;
			
			printf("room1_current : %d\n", room1_current);
     526:	0f 2e       	mov	r0, r31
     528:	f0 e3       	ldi	r31, 0x30	; 48
     52a:	af 2e       	mov	r10, r31
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	bf 2e       	mov	r11, r31
     530:	f0 2d       	mov	r31, r0
			_delay_us(10);
			printf("room2_current : %d\n", room2_current);
     532:	0f 2e       	mov	r0, r31
     534:	f4 e4       	ldi	r31, 0x44	; 68
     536:	cf 2e       	mov	r12, r31
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	df 2e       	mov	r13, r31
     53c:	f0 2d       	mov	r31, r0
			_delay_us(10);
			printf("room3_current : %d\n", room3_current);
     53e:	0f 2e       	mov	r0, r31
     540:	f8 e5       	ldi	r31, 0x58	; 88
     542:	ef 2e       	mov	r14, r31
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	ff 2e       	mov	r15, r31
     548:	f0 2d       	mov	r31, r0
			
			printf("desire_temp : %d %d %d\n", room1_desire, room2_desire, room3_desire);
     54a:	08 e1       	ldi	r16, 0x18	; 24
     54c:	11 e0       	ldi	r17, 0x01	; 1
			if(room2_current <= -30) room2_current = -30;
			else if(room2_current >=  30) room2_current = 30;
			
			room3_current = Volt_to_temperature(ADC_converting_value(0));
			if(room3_current <= -30) room3_current = -30;
			else if(room3_current >=  30) room3_current = 30;
     54e:	0f 2e       	mov	r0, r31
     550:	fe e1       	ldi	r31, 0x1E	; 30
     552:	3f 2e       	mov	r3, r31
     554:	f0 2d       	mov	r31, r0
			room2_current = Volt_to_temperature(ADC_converting_value(1));
			if(room2_current <= -30) room2_current = -30;
			else if(room2_current >=  30) room2_current = 30;
			
			room3_current = Volt_to_temperature(ADC_converting_value(0));
			if(room3_current <= -30) room3_current = -30;
     556:	0f 2e       	mov	r0, r31
     558:	f2 ee       	ldi	r31, 0xE2	; 226
     55a:	6f 2e       	mov	r6, r31
     55c:	f0 2d       	mov	r31, r0
			time_flag = 0;
		}
		
		if(RX_cmd_count) {
			RX_cmd_count--;
			command = strtok(buffer[cmd_idx], " : ");
     55e:	0f 2e       	mov	r0, r31
     560:	f2 e3       	ldi	r31, 0x32	; 50
     562:	4f 2e       	mov	r4, r31
     564:	f0 2d       	mov	r31, r0
				else if(room3_desire >=  30) room3_desire = 30;
				printFND_temper(room3_desire, ROOM3);
				printf("room3_desire : %d\n", room3_desire);
			}
			cmd_idx++;
			cmd_idx = cmd_idx % COMMAND_MAX;
     566:	0f 2e       	mov	r0, r31
     568:	fd ec       	ldi	r31, 0xCD	; 205
     56a:	5f 2e       	mov	r5, r31
     56c:	f0 2d       	mov	r31, r0
			if(!strcmp(command, "room1_desire")) { //strcmp() : 비교해서 같으면 return 0
				room1_desire = atoi(strtok(NULL, " : "));
				if(room1_desire <= -30) room1_desire = -30;
				else if(room1_desire >=  30) room1_desire = 30;
				printFND_temper(room1_desire, ROOM1);
				printf("room1_desire : %d\n", room1_desire);
     56e:	0f 2e       	mov	r0, r31
     570:	fd e7       	ldi	r31, 0x7D	; 125
     572:	8f 2e       	mov	r8, r31
     574:	f1 e0       	ldi	r31, 0x01	; 1
     576:	9f 2e       	mov	r9, r31
     578:	f0 2d       	mov	r31, r0
	char *command;
   StorageController_Init();
    while (1) 
    {
		
		CompareTemper();
     57a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <CompareTemper>
		if(time_flag) {
     57e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <time_flag>
     582:	88 23       	and	r24, r24
     584:	09 f4       	brne	.+2      	; 0x588 <main+0x68>
     586:	85 c0       	rjmp	.+266    	; 0x692 <main+0x172>
			room1_current = Volt_to_temperature(ADC_converting_value(2));
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     58e:	0e 94 9b 00 	call	0x136	; 0x136 <Volt_to_temperature>
			if(room1_current <= -30) room1_current = -30;
     592:	83 3e       	cpi	r24, 0xE3	; 227
     594:	1c f4       	brge	.+6      	; 0x59c <main+0x7c>
     596:	60 92 db 01 	sts	0x01DB, r6	; 0x8001db <room1_current>
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <main+0x8a>
			else if(room1_current >= 30) room1_current = 30;
     59c:	8e 31       	cpi	r24, 0x1E	; 30
     59e:	1c f4       	brge	.+6      	; 0x5a6 <main+0x86>
    while (1) 
    {
		
		CompareTemper();
		if(time_flag) {
			room1_current = Volt_to_temperature(ADC_converting_value(2));
     5a0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <room1_current>
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <main+0x8a>
			if(room1_current <= -30) room1_current = -30;
			else if(room1_current >= 30) room1_current = 30;
     5a6:	30 92 db 01 	sts	0x01DB, r3	; 0x8001db <room1_current>
			
			room2_current = Volt_to_temperature(ADC_converting_value(1));
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     5b0:	0e 94 9b 00 	call	0x136	; 0x136 <Volt_to_temperature>
			if(room2_current <= -30) room2_current = -30;
     5b4:	83 3e       	cpi	r24, 0xE3	; 227
     5b6:	1c f4       	brge	.+6      	; 0x5be <main+0x9e>
     5b8:	60 92 de 01 	sts	0x01DE, r6	; 0x8001de <room2_current>
     5bc:	07 c0       	rjmp	.+14     	; 0x5cc <main+0xac>
			else if(room2_current >=  30) room2_current = 30;
     5be:	8e 31       	cpi	r24, 0x1E	; 30
     5c0:	1c f4       	brge	.+6      	; 0x5c8 <main+0xa8>
		if(time_flag) {
			room1_current = Volt_to_temperature(ADC_converting_value(2));
			if(room1_current <= -30) room1_current = -30;
			else if(room1_current >= 30) room1_current = 30;
			
			room2_current = Volt_to_temperature(ADC_converting_value(1));
     5c2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <room2_current>
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <main+0xac>
			if(room2_current <= -30) room2_current = -30;
			else if(room2_current >=  30) room2_current = 30;
     5c8:	30 92 de 01 	sts	0x01DE, r3	; 0x8001de <room2_current>
			
			room3_current = Volt_to_temperature(ADC_converting_value(0));
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     5d2:	0e 94 9b 00 	call	0x136	; 0x136 <Volt_to_temperature>
			if(room3_current <= -30) room3_current = -30;
     5d6:	83 3e       	cpi	r24, 0xE3	; 227
     5d8:	1c f4       	brge	.+6      	; 0x5e0 <main+0xc0>
     5da:	60 92 dd 01 	sts	0x01DD, r6	; 0x8001dd <room3_current>
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <main+0xce>
			else if(room3_current >=  30) room3_current = 30;
     5e0:	8e 31       	cpi	r24, 0x1E	; 30
     5e2:	1c f4       	brge	.+6      	; 0x5ea <main+0xca>
			
			room2_current = Volt_to_temperature(ADC_converting_value(1));
			if(room2_current <= -30) room2_current = -30;
			else if(room2_current >=  30) room2_current = 30;
			
			room3_current = Volt_to_temperature(ADC_converting_value(0));
     5e4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <room3_current>
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <main+0xce>
			if(room3_current <= -30) room3_current = -30;
			else if(room3_current >=  30) room3_current = 30;
     5ea:	30 92 dd 01 	sts	0x01DD, r3	; 0x8001dd <room3_current>
			
			printf("room1_current : %d\n", room1_current);
     5ee:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <room1_current>
     5f2:	28 2f       	mov	r18, r24
     5f4:	08 2e       	mov	r0, r24
     5f6:	00 0c       	add	r0, r0
     5f8:	33 0b       	sbc	r19, r19
     5fa:	3f 93       	push	r19
     5fc:	8f 93       	push	r24
     5fe:	bf 92       	push	r11
     600:	af 92       	push	r10
     602:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
     606:	23 e0       	ldi	r18, 0x03	; 3
     608:	2a 95       	dec	r18
     60a:	f1 f7       	brne	.-4      	; 0x608 <main+0xe8>
     60c:	00 00       	nop
			_delay_us(10);
			printf("room2_current : %d\n", room2_current);
     60e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <room2_current>
     612:	28 2f       	mov	r18, r24
     614:	08 2e       	mov	r0, r24
     616:	00 0c       	add	r0, r0
     618:	33 0b       	sbc	r19, r19
     61a:	3f 93       	push	r19
     61c:	8f 93       	push	r24
     61e:	df 92       	push	r13
     620:	cf 92       	push	r12
     622:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	8a 95       	dec	r24
     62a:	f1 f7       	brne	.-4      	; 0x628 <main+0x108>
     62c:	00 00       	nop
			_delay_us(10);
			printf("room3_current : %d\n", room3_current);
     62e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <room3_current>
     632:	28 2f       	mov	r18, r24
     634:	08 2e       	mov	r0, r24
     636:	00 0c       	add	r0, r0
     638:	33 0b       	sbc	r19, r19
     63a:	3f 93       	push	r19
     63c:	8f 93       	push	r24
     63e:	ff 92       	push	r15
     640:	ef 92       	push	r14
     642:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
			
			printf("desire_temp : %d %d %d\n", room1_desire, room2_desire, room3_desire);
     646:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     64a:	28 2f       	mov	r18, r24
     64c:	08 2e       	mov	r0, r24
     64e:	00 0c       	add	r0, r0
     650:	33 0b       	sbc	r19, r19
     652:	3f 93       	push	r19
     654:	8f 93       	push	r24
     656:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     65a:	28 2f       	mov	r18, r24
     65c:	08 2e       	mov	r0, r24
     65e:	00 0c       	add	r0, r0
     660:	33 0b       	sbc	r19, r19
     662:	3f 93       	push	r19
     664:	8f 93       	push	r24
     666:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     66a:	28 2f       	mov	r18, r24
     66c:	08 2e       	mov	r0, r24
     66e:	00 0c       	add	r0, r0
     670:	33 0b       	sbc	r19, r19
     672:	3f 93       	push	r19
     674:	8f 93       	push	r24
     676:	1f 93       	push	r17
     678:	0f 93       	push	r16
     67a:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
			time_flag = 0;
     67e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <time_flag>
     682:	8d b7       	in	r24, 0x3d	; 61
     684:	9e b7       	in	r25, 0x3e	; 62
     686:	44 96       	adiw	r24, 0x14	; 20
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	9e bf       	out	0x3e, r25	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	8d bf       	out	0x3d, r24	; 61
		}
		
		if(RX_cmd_count) {
     692:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <RX_cmd_count>
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <main+0x17c>
     69a:	bf c0       	rjmp	.+382    	; 0x81a <main+0x2fa>
			RX_cmd_count--;
     69c:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <RX_cmd_count>
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <RX_cmd_count>
			command = strtok(buffer[cmd_idx], " : ");
     6a6:	47 9c       	mul	r4, r7
     6a8:	c0 01       	movw	r24, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	6c e6       	ldi	r22, 0x6C	; 108
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	88 51       	subi	r24, 0x18	; 24
     6b2:	9e 4f       	sbci	r25, 0xFE	; 254
     6b4:	0e 94 96 07 	call	0xf2c	; 0xf2c <strtok>
     6b8:	ec 01       	movw	r28, r24
			if(!strcmp(command, "room1_desire")) { //strcmp() : 비교해서 같으면 return 0
     6ba:	60 e7       	ldi	r22, 0x70	; 112
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	0e 94 9b 07 	call	0xf36	; 0xf36 <strcmp>
     6c2:	89 2b       	or	r24, r25
     6c4:	71 f5       	brne	.+92     	; 0x722 <main+0x202>
				room1_desire = atoi(strtok(NULL, " : "));
     6c6:	6c e6       	ldi	r22, 0x6C	; 108
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 96 07 	call	0xf2c	; 0xf2c <strtok>
     6d2:	0e 94 78 07 	call	0xef0	; 0xef0 <atoi>
				if(room1_desire <= -30) room1_desire = -30;
     6d6:	83 3e       	cpi	r24, 0xE3	; 227
     6d8:	1c f4       	brge	.+6      	; 0x6e0 <main+0x1c0>
     6da:	60 92 16 01 	sts	0x0116, r6	; 0x800116 <room1_desire>
     6de:	07 c0       	rjmp	.+14     	; 0x6ee <main+0x1ce>
				else if(room1_desire >=  30) room1_desire = 30;
     6e0:	8e 31       	cpi	r24, 0x1E	; 30
     6e2:	1c f4       	brge	.+6      	; 0x6ea <main+0x1ca>
		
		if(RX_cmd_count) {
			RX_cmd_count--;
			command = strtok(buffer[cmd_idx], " : ");
			if(!strcmp(command, "room1_desire")) { //strcmp() : 비교해서 같으면 return 0
				room1_desire = atoi(strtok(NULL, " : "));
     6e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <room1_desire>
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <main+0x1ce>
				if(room1_desire <= -30) room1_desire = -30;
				else if(room1_desire >=  30) room1_desire = 30;
     6ea:	30 92 16 01 	sts	0x0116, r3	; 0x800116 <room1_desire>
				printFND_temper(room1_desire, ROOM1);
     6ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	08 2e       	mov	r0, r24
     6f8:	00 0c       	add	r0, r0
     6fa:	99 0b       	sbc	r25, r25
     6fc:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
				printf("room1_desire : %d\n", room1_desire);
     700:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <room1_desire>
     704:	28 2f       	mov	r18, r24
     706:	08 2e       	mov	r0, r24
     708:	00 0c       	add	r0, r0
     70a:	33 0b       	sbc	r19, r19
     70c:	3f 93       	push	r19
     70e:	8f 93       	push	r24
     710:	9f 92       	push	r9
     712:	8f 92       	push	r8
     714:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	6d c0       	rjmp	.+218    	; 0x7fc <main+0x2dc>
			}
			else if(!strcmp(command, "room2_desire")) { 
     722:	60 e9       	ldi	r22, 0x90	; 144
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	ce 01       	movw	r24, r28
     728:	0e 94 9b 07 	call	0xf36	; 0xf36 <strcmp>
     72c:	89 2b       	or	r24, r25
     72e:	81 f5       	brne	.+96     	; 0x790 <main+0x270>
				room2_desire = atoi(strtok(NULL, " : "));
     730:	6c e6       	ldi	r22, 0x6C	; 108
     732:	71 e0       	ldi	r23, 0x01	; 1
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 96 07 	call	0xf2c	; 0xf2c <strtok>
     73c:	0e 94 78 07 	call	0xef0	; 0xef0 <atoi>
				if(room2_desire <= -30) room2_desire = -30;
     740:	83 3e       	cpi	r24, 0xE3	; 227
     742:	1c f4       	brge	.+6      	; 0x74a <main+0x22a>
     744:	60 92 15 01 	sts	0x0115, r6	; 0x800115 <room2_desire>
     748:	07 c0       	rjmp	.+14     	; 0x758 <main+0x238>
				else if(room2_desire >=  30) room2_desire = 30;
     74a:	8e 31       	cpi	r24, 0x1E	; 30
     74c:	1c f4       	brge	.+6      	; 0x754 <main+0x234>
				else if(room1_desire >=  30) room1_desire = 30;
				printFND_temper(room1_desire, ROOM1);
				printf("room1_desire : %d\n", room1_desire);
			}
			else if(!strcmp(command, "room2_desire")) { 
				room2_desire = atoi(strtok(NULL, " : "));
     74e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <room2_desire>
     752:	02 c0       	rjmp	.+4      	; 0x758 <main+0x238>
				if(room2_desire <= -30) room2_desire = -30;
				else if(room2_desire >=  30) room2_desire = 30;
     754:	30 92 15 01 	sts	0x0115, r3	; 0x800115 <room2_desire>
				printFND_temper(room2_desire, ROOM2);
     758:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	08 2e       	mov	r0, r24
     762:	00 0c       	add	r0, r0
     764:	99 0b       	sbc	r25, r25
     766:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
				printf("room2_desire : %d\n", room2_desire);
     76a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <room2_desire>
     76e:	28 2f       	mov	r18, r24
     770:	08 2e       	mov	r0, r24
     772:	00 0c       	add	r0, r0
     774:	33 0b       	sbc	r19, r19
     776:	3f 93       	push	r19
     778:	8f 93       	push	r24
     77a:	8d e9       	ldi	r24, 0x9D	; 157
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	36 c0       	rjmp	.+108    	; 0x7fc <main+0x2dc>
			}
			else if(!strcmp(command, "room3_desire")) {
     790:	60 eb       	ldi	r22, 0xB0	; 176
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	ce 01       	movw	r24, r28
     796:	0e 94 9b 07 	call	0xf36	; 0xf36 <strcmp>
     79a:	89 2b       	or	r24, r25
     79c:	79 f5       	brne	.+94     	; 0x7fc <main+0x2dc>
				room3_desire = atoi(strtok(NULL, " : "));
     79e:	6c e6       	ldi	r22, 0x6C	; 108
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 96 07 	call	0xf2c	; 0xf2c <strtok>
     7aa:	0e 94 78 07 	call	0xef0	; 0xef0 <atoi>
				if(room3_desire <= -30) room3_desire = -30;
     7ae:	83 3e       	cpi	r24, 0xE3	; 227
     7b0:	1c f4       	brge	.+6      	; 0x7b8 <main+0x298>
     7b2:	60 92 14 01 	sts	0x0114, r6	; 0x800114 <room3_desire>
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <main+0x2a6>
				else if(room3_desire >=  30) room3_desire = 30;
     7b8:	8e 31       	cpi	r24, 0x1E	; 30
     7ba:	1c f4       	brge	.+6      	; 0x7c2 <main+0x2a2>
				else if(room2_desire >=  30) room2_desire = 30;
				printFND_temper(room2_desire, ROOM2);
				printf("room2_desire : %d\n", room2_desire);
			}
			else if(!strcmp(command, "room3_desire")) {
				room3_desire = atoi(strtok(NULL, " : "));
     7bc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <room3_desire>
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <main+0x2a6>
				if(room3_desire <= -30) room3_desire = -30;
				else if(room3_desire >=  30) room3_desire = 30;
     7c2:	30 92 14 01 	sts	0x0114, r3	; 0x800114 <room3_desire>
				printFND_temper(room3_desire, ROOM3);
     7c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	08 2e       	mov	r0, r24
     7d0:	00 0c       	add	r0, r0
     7d2:	99 0b       	sbc	r25, r25
     7d4:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
				printf("room3_desire : %d\n", room3_desire);
     7d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <room3_desire>
     7dc:	28 2f       	mov	r18, r24
     7de:	08 2e       	mov	r0, r24
     7e0:	00 0c       	add	r0, r0
     7e2:	33 0b       	sbc	r19, r19
     7e4:	3f 93       	push	r19
     7e6:	8f 93       	push	r24
     7e8:	8d eb       	ldi	r24, 0xBD	; 189
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	0e 94 1e 08 	call	0x103c	; 0x103c <printf>
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
			}
			cmd_idx++;
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	97 0d       	add	r25, r7
			cmd_idx = cmd_idx % COMMAND_MAX;
     800:	95 9d       	mul	r25, r5
     802:	71 2c       	mov	r7, r1
     804:	11 24       	eor	r1, r1
     806:	76 94       	lsr	r7
     808:	76 94       	lsr	r7
     80a:	76 94       	lsr	r7
     80c:	77 0c       	add	r7, r7
     80e:	87 2d       	mov	r24, r7
     810:	88 0f       	add	r24, r24
     812:	88 0f       	add	r24, r24
     814:	78 0e       	add	r7, r24
     816:	97 19       	sub	r25, r7
     818:	79 2e       	mov	r7, r25
		}
		
		
		if(long_key_flag) {
     81a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <long_key_flag>
     81e:	88 23       	and	r24, r24
     820:	09 f4       	brne	.+2      	; 0x824 <main+0x304>
     822:	4d c0       	rjmp	.+154    	; 0x8be <main+0x39e>
     824:	82 e4       	ldi	r24, 0x42	; 66
     826:	8a 95       	dec	r24
     828:	f1 f7       	brne	.-4      	; 0x826 <main+0x306>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <main+0x30c>
			_delay_us(200);
			if(Keyscan_sub() != 0)
     82c:	0e 94 17 01 	call	0x22e	; 0x22e <Keyscan_sub>
     830:	88 23       	and	r24, r24
     832:	09 f4       	brne	.+2      	; 0x836 <main+0x316>
     834:	4b c0       	rjmp	.+150    	; 0x8cc <main+0x3ac>
			{
				
				
				switch(Keyscan_sub()) {
     836:	0e 94 17 01 	call	0x22e	; 0x22e <Keyscan_sub>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	61 f0       	breq	.+24     	; 0x856 <main+0x336>
     83e:	18 f4       	brcc	.+6      	; 0x846 <main+0x326>
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	31 f0       	breq	.+12     	; 0x850 <main+0x330>
     844:	39 c0       	rjmp	.+114    	; 0x8b8 <main+0x398>
     846:	83 30       	cpi	r24, 0x03	; 3
     848:	61 f0       	breq	.+24     	; 0x862 <main+0x342>
     84a:	84 30       	cpi	r24, 0x04	; 4
     84c:	81 f0       	breq	.+32     	; 0x86e <main+0x34e>
     84e:	34 c0       	rjmp	.+104    	; 0x8b8 <main+0x398>
					case 1: SelectRoomProcess(); 
     850:	0e 94 6d 01 	call	0x2da	; 0x2da <SelectRoomProcess>
							long_key_flag = 0;
							break;
     854:	31 c0       	rjmp	.+98     	; 0x8b8 <main+0x398>
					case 2: TemperIncreaseProcess(selected_room); 
     856:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <selected_room>
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 9c 01 	call	0x338	; 0x338 <TemperIncreaseProcess>
							long_key_flag = 0; 
							break;
     860:	2b c0       	rjmp	.+86     	; 0x8b8 <main+0x398>
					case 3: TemperDecreaseProcess(selected_room); 
     862:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <selected_room>
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 07 02 	call	0x40e	; 0x40e <TemperDecreaseProcess>
							long_key_flag = 0;
							break;
     86c:	25 c0       	rjmp	.+74     	; 0x8b8 <main+0x398>
					case 4: 
							switch(selected_room){
     86e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <selected_room>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	71 f0       	breq	.+28     	; 0x892 <main+0x372>
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	b1 f0       	breq	.+44     	; 0x8a6 <main+0x386>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	e9 f4       	brne	.+58     	; 0x8b8 <main+0x398>
								case ROOM1: 
									printFND_temper(room1_current, ROOM1);
     87e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <room1_current>
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	08 2e       	mov	r0, r24
     888:	00 0c       	add	r0, r0
     88a:	99 0b       	sbc	r25, r25
     88c:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
									long_key_flag = 0;
									break;
     890:	13 c0       	rjmp	.+38     	; 0x8b8 <main+0x398>
								case ROOM2: 
									printFND_temper(room2_current, ROOM2);
     892:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <room2_current>
     896:	62 e0       	ldi	r22, 0x02	; 2
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	08 2e       	mov	r0, r24
     89c:	00 0c       	add	r0, r0
     89e:	99 0b       	sbc	r25, r25
     8a0:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
									long_key_flag = 0;
									break;
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <main+0x398>
								case ROOM3: 
									printFND_temper(room3_current, ROOM3);
     8a6:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <room3_current>
     8aa:	63 e0       	ldi	r22, 0x03	; 3
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	08 2e       	mov	r0, r24
     8b0:	00 0c       	add	r0, r0
     8b2:	99 0b       	sbc	r25, r25
     8b4:	0e 94 41 01 	call	0x282	; 0x282 <printFND_temper>
					default: break;
				}
					
					
				
				long_key_flag = 0;
     8b8:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <long_key_flag>
     8bc:	07 c0       	rjmp	.+14     	; 0x8cc <main+0x3ac>
			
			}
		}
		else
		{
			if(!Keyscan_sub())
     8be:	0e 94 17 01 	call	0x22e	; 0x22e <Keyscan_sub>
     8c2:	81 11       	cpse	r24, r1
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <main+0x3ac>
			{
				long_key_flag = 1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <long_key_flag>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8cc:	83 ec       	ldi	r24, 0xC3	; 195
     8ce:	99 e0       	ldi	r25, 0x09	; 9
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <main+0x3b0>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <main+0x3b6>
     8d6:	00 00       	nop
     8d8:	50 ce       	rjmp	.-864    	; 0x57a <main+0x5a>

000008da <__vector_14>:
	FND_COM_PORT |= FND4digit_digit[i];//< FND_shift_out보다 먼저하면 이전 데이터가 출력돼서 정확한 출력이 나오지 않음
	
} 

int Timer_main(void)
{
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
     8fc:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <count>
     900:	8b 30       	cpi	r24, 0x0B	; 11
     902:	e8 f4       	brcc	.+58     	; 0x93e <__stack+0x3f>
     904:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <count>
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <count>
     90e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <msec>
     912:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <msec+0x1>
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <msec+0x1>
     91c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <msec>
     920:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <msec>
     924:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <msec+0x1>
     928:	88 3e       	cpi	r24, 0xE8	; 232
     92a:	93 40       	sbci	r25, 0x03	; 3
     92c:	fc f0       	brlt	.+62     	; 0x96c <__stack+0x6d>
     92e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <msec>
     932:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <msec+0x1>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <time_flag>
     93c:	17 c0       	rjmp	.+46     	; 0x96c <__stack+0x6d>
     93e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <msec>
     942:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <msec+0x1>
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <msec+0x1>
     94c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <msec>
     950:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <msec>
     954:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <msec+0x1>
     958:	88 3b       	cpi	r24, 0xB8	; 184
     95a:	9b 40       	sbci	r25, 0x0B	; 11
     95c:	3c f0       	brlt	.+14     	; 0x96c <__stack+0x6d>
     95e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <msec+0x1>
     962:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <msec>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <time_flag>
     96c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <i>
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <i>
     976:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <i>
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	10 f0       	brcs	.+4      	; 0x982 <__stack+0x83>
     97e:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <i>
     982:	8b b1       	in	r24, 0x0b	; 11
     984:	8f 70       	andi	r24, 0x0F	; 15
     986:	8b b9       	out	0x0b, r24	; 11
     988:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <i>
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e9 52       	subi	r30, 0x29	; 41
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	80 81       	ld	r24, Z
     994:	0e 94 a9 00 	call	0x152	; 0x152 <FND_shift_out>
     998:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <i>
     99c:	9b b1       	in	r25, 0x0b	; 11
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ea 5f       	subi	r30, 0xFA	; 250
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	80 81       	ld	r24, Z
     9a6:	89 2b       	or	r24, r25
     9a8:	8b b9       	out	0x0b, r24	; 11
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f 90       	pop	r0
     9c8:	1f 90       	pop	r1
     9ca:	18 95       	reti

000009cc <Timer0_init>:
*/

void Timer0_init(void)
{
	//타이머 초기화
	TCCR0A |= 1 << WGM01;					//0b00000010;  //CTC Mode
     9cc:	84 b5       	in	r24, 0x24	; 36
     9ce:	82 60       	ori	r24, 0x02	; 2
     9d0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00 | 1 << CS01);		//0b00000011;  //64분주 사용(하위 3bit : 011)
     9d2:	85 b5       	in	r24, 0x25	; 37
     9d4:	83 60       	ori	r24, 0x03	; 3
     9d6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;							//비교할 값 => (16,000,000 / 64) / 1000 = 250 (0 ~ "249")			//1ms 주기
     9d8:	89 ef       	ldi	r24, 0xF9	; 249
     9da:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
     9dc:	ee e6       	ldi	r30, 0x6E	; 110
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	82 60       	ori	r24, 0x02	; 2
     9e4:	80 83       	st	Z, r24
     9e6:	08 95       	ret

000009e8 <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
     9e8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	90 81       	ld	r25, Z
     9ee:	95 ff       	sbrs	r25, 5
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
     9f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     9f6:	08 95       	ret

000009f8 <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	2f 93       	push	r18
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
     a0c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a10:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
     a14:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <idx.2082>
     a18:	82 33       	cpi	r24, 0x32	; 50
     a1a:	e0 f5       	brcc	.+120    	; 0xa94 <__vector_18+0x9c>
     a1c:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <RX_cmd_count>
     a20:	9b 30       	cpi	r25, 0x0B	; 11
     a22:	c0 f5       	brcc	.+112    	; 0xa94 <__vector_18+0x9c>
		if(RX_data == '\n') { //명령이 들어옴
     a24:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <RX_data>
     a28:	9a 30       	cpi	r25, 0x0A	; 10
     a2a:	19 f5       	brne	.+70     	; 0xa72 <__vector_18+0x7a>
			buffer[buf_idx][idx] = 0; //or '\0' //문자열의 마지막에 null 넣어주기
     a2c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <buf_idx.2083>
     a30:	22 e3       	ldi	r18, 0x32	; 50
     a32:	92 9f       	mul	r25, r18
     a34:	f0 01       	movw	r30, r0
     a36:	11 24       	eor	r1, r1
     a38:	e8 51       	subi	r30, 0x18	; 24
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	e8 0f       	add	r30, r24
     a3e:	f1 1d       	adc	r31, r1
     a40:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
     a42:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <idx.2082>
			RX_cmd_count++;
     a46:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <RX_cmd_count>
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
     a50:	9f 5f       	subi	r25, 0xFF	; 255
     a52:	8d ec       	ldi	r24, 0xCD	; 205
     a54:	98 9f       	mul	r25, r24
     a56:	81 2d       	mov	r24, r1
     a58:	11 24       	eor	r1, r1
     a5a:	86 95       	lsr	r24
     a5c:	86 95       	lsr	r24
     a5e:	86 95       	lsr	r24
     a60:	88 0f       	add	r24, r24
     a62:	28 2f       	mov	r18, r24
     a64:	22 0f       	add	r18, r18
     a66:	22 0f       	add	r18, r18
     a68:	82 0f       	add	r24, r18
     a6a:	98 1b       	sub	r25, r24
     a6c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <buf_idx.2083>
     a70:	11 c0       	rjmp	.+34     	; 0xa94 <__vector_18+0x9c>
		}
		else buffer[buf_idx][idx++] = RX_data;
     a72:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <buf_idx.2083>
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	98 0f       	add	r25, r24
     a7a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <idx.2082>
     a7e:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <RX_data>
     a82:	22 e3       	ldi	r18, 0x32	; 50
     a84:	e2 9f       	mul	r30, r18
     a86:	f0 01       	movw	r30, r0
     a88:	11 24       	eor	r1, r1
     a8a:	e8 51       	subi	r30, 0x18	; 24
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	e8 0f       	add	r30, r24
     a90:	f1 1d       	adc	r31, r1
     a92:	90 83       	st	Z, r25
	}
	
	//TX0_char(RX_data);
	RX_flag = 1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <RX_flag>
}
     a9a:	ff 91       	pop	r31
     a9c:	ef 91       	pop	r30
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <UART0_init>:
	
	return 0;
}

void UART0_init(unsigned long baud)
{
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	84 ef       	ldi	r24, 0xF4	; 244
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
     ac6:	e1 ec       	ldi	r30, 0xC1	; 193
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	88 69       	ori	r24, 0x98	; 152
     ace:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
     ad0:	e2 ec       	ldi	r30, 0xC2	; 194
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	86 60       	ori	r24, 0x06	; 6
     ad8:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
     ada:	60 e4       	ldi	r22, 0x40	; 64
     adc:	72 e4       	ldi	r23, 0x42	; 66
     ade:	8f e0       	ldi	r24, 0x0F	; 15
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a7 01       	movw	r20, r14
     ae4:	96 01       	movw	r18, r12
     ae6:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
     aea:	da 01       	movw	r26, r20
     aec:	c9 01       	movw	r24, r18
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	89 2f       	mov	r24, r25
     af6:	9a 2f       	mov	r25, r26
     af8:	ab 2f       	mov	r26, r27
     afa:	bb 27       	eor	r27, r27
     afc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
     b06:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     b0a:	8f e9       	ldi	r24, 0x9F	; 159
     b0c:	9f e0       	ldi	r25, 0x0F	; 15
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <UART0_init+0x60>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <UART0_init+0x66>
     b14:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	08 95       	ret

00000b20 <__subsf3>:
     b20:	50 58       	subi	r21, 0x80	; 128

00000b22 <__addsf3>:
     b22:	bb 27       	eor	r27, r27
     b24:	aa 27       	eor	r26, r26
     b26:	0e 94 a8 05 	call	0xb50	; 0xb50 <__addsf3x>
     b2a:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
     b2e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
     b32:	38 f0       	brcs	.+14     	; 0xb42 <__addsf3+0x20>
     b34:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
     b38:	20 f0       	brcs	.+8      	; 0xb42 <__addsf3+0x20>
     b3a:	39 f4       	brne	.+14     	; 0xb4a <__addsf3+0x28>
     b3c:	9f 3f       	cpi	r25, 0xFF	; 255
     b3e:	19 f4       	brne	.+6      	; 0xb46 <__addsf3+0x24>
     b40:	26 f4       	brtc	.+8      	; 0xb4a <__addsf3+0x28>
     b42:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>
     b46:	0e f4       	brtc	.+2      	; 0xb4a <__addsf3+0x28>
     b48:	e0 95       	com	r30
     b4a:	e7 fb       	bst	r30, 7
     b4c:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>

00000b50 <__addsf3x>:
     b50:	e9 2f       	mov	r30, r25
     b52:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
     b56:	58 f3       	brcs	.-42     	; 0xb2e <__addsf3+0xc>
     b58:	ba 17       	cp	r27, r26
     b5a:	62 07       	cpc	r22, r18
     b5c:	73 07       	cpc	r23, r19
     b5e:	84 07       	cpc	r24, r20
     b60:	95 07       	cpc	r25, r21
     b62:	20 f0       	brcs	.+8      	; 0xb6c <__addsf3x+0x1c>
     b64:	79 f4       	brne	.+30     	; 0xb84 <__addsf3x+0x34>
     b66:	a6 f5       	brtc	.+104    	; 0xbd0 <__addsf3x+0x80>
     b68:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_zero>
     b6c:	0e f4       	brtc	.+2      	; 0xb70 <__addsf3x+0x20>
     b6e:	e0 95       	com	r30
     b70:	0b 2e       	mov	r0, r27
     b72:	ba 2f       	mov	r27, r26
     b74:	a0 2d       	mov	r26, r0
     b76:	0b 01       	movw	r0, r22
     b78:	b9 01       	movw	r22, r18
     b7a:	90 01       	movw	r18, r0
     b7c:	0c 01       	movw	r0, r24
     b7e:	ca 01       	movw	r24, r20
     b80:	a0 01       	movw	r20, r0
     b82:	11 24       	eor	r1, r1
     b84:	ff 27       	eor	r31, r31
     b86:	59 1b       	sub	r21, r25
     b88:	99 f0       	breq	.+38     	; 0xbb0 <__addsf3x+0x60>
     b8a:	59 3f       	cpi	r21, 0xF9	; 249
     b8c:	50 f4       	brcc	.+20     	; 0xba2 <__addsf3x+0x52>
     b8e:	50 3e       	cpi	r21, 0xE0	; 224
     b90:	68 f1       	brcs	.+90     	; 0xbec <__addsf3x+0x9c>
     b92:	1a 16       	cp	r1, r26
     b94:	f0 40       	sbci	r31, 0x00	; 0
     b96:	a2 2f       	mov	r26, r18
     b98:	23 2f       	mov	r18, r19
     b9a:	34 2f       	mov	r19, r20
     b9c:	44 27       	eor	r20, r20
     b9e:	58 5f       	subi	r21, 0xF8	; 248
     ba0:	f3 cf       	rjmp	.-26     	; 0xb88 <__addsf3x+0x38>
     ba2:	46 95       	lsr	r20
     ba4:	37 95       	ror	r19
     ba6:	27 95       	ror	r18
     ba8:	a7 95       	ror	r26
     baa:	f0 40       	sbci	r31, 0x00	; 0
     bac:	53 95       	inc	r21
     bae:	c9 f7       	brne	.-14     	; 0xba2 <__addsf3x+0x52>
     bb0:	7e f4       	brtc	.+30     	; 0xbd0 <__addsf3x+0x80>
     bb2:	1f 16       	cp	r1, r31
     bb4:	ba 0b       	sbc	r27, r26
     bb6:	62 0b       	sbc	r22, r18
     bb8:	73 0b       	sbc	r23, r19
     bba:	84 0b       	sbc	r24, r20
     bbc:	ba f0       	brmi	.+46     	; 0xbec <__addsf3x+0x9c>
     bbe:	91 50       	subi	r25, 0x01	; 1
     bc0:	a1 f0       	breq	.+40     	; 0xbea <__addsf3x+0x9a>
     bc2:	ff 0f       	add	r31, r31
     bc4:	bb 1f       	adc	r27, r27
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	88 1f       	adc	r24, r24
     bcc:	c2 f7       	brpl	.-16     	; 0xbbe <__addsf3x+0x6e>
     bce:	0e c0       	rjmp	.+28     	; 0xbec <__addsf3x+0x9c>
     bd0:	ba 0f       	add	r27, r26
     bd2:	62 1f       	adc	r22, r18
     bd4:	73 1f       	adc	r23, r19
     bd6:	84 1f       	adc	r24, r20
     bd8:	48 f4       	brcc	.+18     	; 0xbec <__addsf3x+0x9c>
     bda:	87 95       	ror	r24
     bdc:	77 95       	ror	r23
     bde:	67 95       	ror	r22
     be0:	b7 95       	ror	r27
     be2:	f7 95       	ror	r31
     be4:	9e 3f       	cpi	r25, 0xFE	; 254
     be6:	08 f0       	brcs	.+2      	; 0xbea <__addsf3x+0x9a>
     be8:	b0 cf       	rjmp	.-160    	; 0xb4a <__addsf3+0x28>
     bea:	93 95       	inc	r25
     bec:	88 0f       	add	r24, r24
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <__addsf3x+0xa2>
     bf0:	99 27       	eor	r25, r25
     bf2:	ee 0f       	add	r30, r30
     bf4:	97 95       	ror	r25
     bf6:	87 95       	ror	r24
     bf8:	08 95       	ret

00000bfa <__fixsfsi>:
     bfa:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
     bfe:	68 94       	set
     c00:	b1 11       	cpse	r27, r1
     c02:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
     c06:	08 95       	ret

00000c08 <__fixunssfsi>:
     c08:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_splitA>
     c0c:	88 f0       	brcs	.+34     	; 0xc30 <__fixunssfsi+0x28>
     c0e:	9f 57       	subi	r25, 0x7F	; 127
     c10:	98 f0       	brcs	.+38     	; 0xc38 <__fixunssfsi+0x30>
     c12:	b9 2f       	mov	r27, r25
     c14:	99 27       	eor	r25, r25
     c16:	b7 51       	subi	r27, 0x17	; 23
     c18:	b0 f0       	brcs	.+44     	; 0xc46 <__fixunssfsi+0x3e>
     c1a:	e1 f0       	breq	.+56     	; 0xc54 <__fixunssfsi+0x4c>
     c1c:	66 0f       	add	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	88 1f       	adc	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	1a f0       	brmi	.+6      	; 0xc2c <__fixunssfsi+0x24>
     c26:	ba 95       	dec	r27
     c28:	c9 f7       	brne	.-14     	; 0xc1c <__fixunssfsi+0x14>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <__fixunssfsi+0x4c>
     c2c:	b1 30       	cpi	r27, 0x01	; 1
     c2e:	91 f0       	breq	.+36     	; 0xc54 <__fixunssfsi+0x4c>
     c30:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_zero>
     c34:	b1 e0       	ldi	r27, 0x01	; 1
     c36:	08 95       	ret
     c38:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_zero>
     c3c:	67 2f       	mov	r22, r23
     c3e:	78 2f       	mov	r23, r24
     c40:	88 27       	eor	r24, r24
     c42:	b8 5f       	subi	r27, 0xF8	; 248
     c44:	39 f0       	breq	.+14     	; 0xc54 <__fixunssfsi+0x4c>
     c46:	b9 3f       	cpi	r27, 0xF9	; 249
     c48:	cc f3       	brlt	.-14     	; 0xc3c <__fixunssfsi+0x34>
     c4a:	86 95       	lsr	r24
     c4c:	77 95       	ror	r23
     c4e:	67 95       	ror	r22
     c50:	b3 95       	inc	r27
     c52:	d9 f7       	brne	.-10     	; 0xc4a <__fixunssfsi+0x42>
     c54:	3e f4       	brtc	.+14     	; 0xc64 <__fixunssfsi+0x5c>
     c56:	90 95       	com	r25
     c58:	80 95       	com	r24
     c5a:	70 95       	com	r23
     c5c:	61 95       	neg	r22
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	8f 4f       	sbci	r24, 0xFF	; 255
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	08 95       	ret

00000c66 <__floatunsisf>:
     c66:	e8 94       	clt
     c68:	09 c0       	rjmp	.+18     	; 0xc7c <__floatsisf+0x12>

00000c6a <__floatsisf>:
     c6a:	97 fb       	bst	r25, 7
     c6c:	3e f4       	brtc	.+14     	; 0xc7c <__floatsisf+0x12>
     c6e:	90 95       	com	r25
     c70:	80 95       	com	r24
     c72:	70 95       	com	r23
     c74:	61 95       	neg	r22
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	8f 4f       	sbci	r24, 0xFF	; 255
     c7a:	9f 4f       	sbci	r25, 0xFF	; 255
     c7c:	99 23       	and	r25, r25
     c7e:	a9 f0       	breq	.+42     	; 0xcaa <__floatsisf+0x40>
     c80:	f9 2f       	mov	r31, r25
     c82:	96 e9       	ldi	r25, 0x96	; 150
     c84:	bb 27       	eor	r27, r27
     c86:	93 95       	inc	r25
     c88:	f6 95       	lsr	r31
     c8a:	87 95       	ror	r24
     c8c:	77 95       	ror	r23
     c8e:	67 95       	ror	r22
     c90:	b7 95       	ror	r27
     c92:	f1 11       	cpse	r31, r1
     c94:	f8 cf       	rjmp	.-16     	; 0xc86 <__floatsisf+0x1c>
     c96:	fa f4       	brpl	.+62     	; 0xcd6 <__floatsisf+0x6c>
     c98:	bb 0f       	add	r27, r27
     c9a:	11 f4       	brne	.+4      	; 0xca0 <__floatsisf+0x36>
     c9c:	60 ff       	sbrs	r22, 0
     c9e:	1b c0       	rjmp	.+54     	; 0xcd6 <__floatsisf+0x6c>
     ca0:	6f 5f       	subi	r22, 0xFF	; 255
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	8f 4f       	sbci	r24, 0xFF	; 255
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <__floatsisf+0x6c>
     caa:	88 23       	and	r24, r24
     cac:	11 f0       	breq	.+4      	; 0xcb2 <__floatsisf+0x48>
     cae:	96 e9       	ldi	r25, 0x96	; 150
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__floatsisf+0x6a>
     cb2:	77 23       	and	r23, r23
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__floatsisf+0x54>
     cb6:	9e e8       	ldi	r25, 0x8E	; 142
     cb8:	87 2f       	mov	r24, r23
     cba:	76 2f       	mov	r23, r22
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <__floatsisf+0x5e>
     cbe:	66 23       	and	r22, r22
     cc0:	71 f0       	breq	.+28     	; 0xcde <__floatsisf+0x74>
     cc2:	96 e8       	ldi	r25, 0x86	; 134
     cc4:	86 2f       	mov	r24, r22
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	2a f0       	brmi	.+10     	; 0xcd6 <__floatsisf+0x6c>
     ccc:	9a 95       	dec	r25
     cce:	66 0f       	add	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	da f7       	brpl	.-10     	; 0xccc <__floatsisf+0x62>
     cd6:	88 0f       	add	r24, r24
     cd8:	96 95       	lsr	r25
     cda:	87 95       	ror	r24
     cdc:	97 f9       	bld	r25, 7
     cde:	08 95       	ret

00000ce0 <__fp_inf>:
     ce0:	97 f9       	bld	r25, 7
     ce2:	9f 67       	ori	r25, 0x7F	; 127
     ce4:	80 e8       	ldi	r24, 0x80	; 128
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	08 95       	ret

00000cec <__fp_nan>:
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	80 ec       	ldi	r24, 0xC0	; 192
     cf0:	08 95       	ret

00000cf2 <__fp_pscA>:
     cf2:	00 24       	eor	r0, r0
     cf4:	0a 94       	dec	r0
     cf6:	16 16       	cp	r1, r22
     cf8:	17 06       	cpc	r1, r23
     cfa:	18 06       	cpc	r1, r24
     cfc:	09 06       	cpc	r0, r25
     cfe:	08 95       	ret

00000d00 <__fp_pscB>:
     d00:	00 24       	eor	r0, r0
     d02:	0a 94       	dec	r0
     d04:	12 16       	cp	r1, r18
     d06:	13 06       	cpc	r1, r19
     d08:	14 06       	cpc	r1, r20
     d0a:	05 06       	cpc	r0, r21
     d0c:	08 95       	ret

00000d0e <__fp_round>:
     d0e:	09 2e       	mov	r0, r25
     d10:	03 94       	inc	r0
     d12:	00 0c       	add	r0, r0
     d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0xc>
     d16:	88 23       	and	r24, r24
     d18:	52 f0       	brmi	.+20     	; 0xd2e <__fp_round+0x20>
     d1a:	bb 0f       	add	r27, r27
     d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fp_round+0x20>
     d1e:	bf 2b       	or	r27, r31
     d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0x18>
     d22:	60 ff       	sbrs	r22, 0
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__fp_round+0x20>
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	08 95       	ret

00000d30 <__fp_split3>:
     d30:	57 fd       	sbrc	r21, 7
     d32:	90 58       	subi	r25, 0x80	; 128
     d34:	44 0f       	add	r20, r20
     d36:	55 1f       	adc	r21, r21
     d38:	59 f0       	breq	.+22     	; 0xd50 <__fp_splitA+0x10>
     d3a:	5f 3f       	cpi	r21, 0xFF	; 255
     d3c:	71 f0       	breq	.+28     	; 0xd5a <__fp_splitA+0x1a>
     d3e:	47 95       	ror	r20

00000d40 <__fp_splitA>:
     d40:	88 0f       	add	r24, r24
     d42:	97 fb       	bst	r25, 7
     d44:	99 1f       	adc	r25, r25
     d46:	61 f0       	breq	.+24     	; 0xd60 <__fp_splitA+0x20>
     d48:	9f 3f       	cpi	r25, 0xFF	; 255
     d4a:	79 f0       	breq	.+30     	; 0xd6a <__fp_splitA+0x2a>
     d4c:	87 95       	ror	r24
     d4e:	08 95       	ret
     d50:	12 16       	cp	r1, r18
     d52:	13 06       	cpc	r1, r19
     d54:	14 06       	cpc	r1, r20
     d56:	55 1f       	adc	r21, r21
     d58:	f2 cf       	rjmp	.-28     	; 0xd3e <__fp_split3+0xe>
     d5a:	46 95       	lsr	r20
     d5c:	f1 df       	rcall	.-30     	; 0xd40 <__fp_splitA>
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <__fp_splitA+0x30>
     d60:	16 16       	cp	r1, r22
     d62:	17 06       	cpc	r1, r23
     d64:	18 06       	cpc	r1, r24
     d66:	99 1f       	adc	r25, r25
     d68:	f1 cf       	rjmp	.-30     	; 0xd4c <__fp_splitA+0xc>
     d6a:	86 95       	lsr	r24
     d6c:	71 05       	cpc	r23, r1
     d6e:	61 05       	cpc	r22, r1
     d70:	08 94       	sec
     d72:	08 95       	ret

00000d74 <__fp_zero>:
     d74:	e8 94       	clt

00000d76 <__fp_szero>:
     d76:	bb 27       	eor	r27, r27
     d78:	66 27       	eor	r22, r22
     d7a:	77 27       	eor	r23, r23
     d7c:	cb 01       	movw	r24, r22
     d7e:	97 f9       	bld	r25, 7
     d80:	08 95       	ret

00000d82 <__mulsf3>:
     d82:	0e 94 d4 06 	call	0xda8	; 0xda8 <__mulsf3x>
     d86:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
     d8a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
     d8e:	38 f0       	brcs	.+14     	; 0xd9e <__mulsf3+0x1c>
     d90:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
     d94:	20 f0       	brcs	.+8      	; 0xd9e <__mulsf3+0x1c>
     d96:	95 23       	and	r25, r21
     d98:	11 f0       	breq	.+4      	; 0xd9e <__mulsf3+0x1c>
     d9a:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
     d9e:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>
     da2:	11 24       	eor	r1, r1
     da4:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>

00000da8 <__mulsf3x>:
     da8:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
     dac:	70 f3       	brcs	.-36     	; 0xd8a <__mulsf3+0x8>

00000dae <__mulsf3_pse>:
     dae:	95 9f       	mul	r25, r21
     db0:	c1 f3       	breq	.-16     	; 0xda2 <__mulsf3+0x20>
     db2:	95 0f       	add	r25, r21
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	55 1f       	adc	r21, r21
     db8:	62 9f       	mul	r22, r18
     dba:	f0 01       	movw	r30, r0
     dbc:	72 9f       	mul	r23, r18
     dbe:	bb 27       	eor	r27, r27
     dc0:	f0 0d       	add	r31, r0
     dc2:	b1 1d       	adc	r27, r1
     dc4:	63 9f       	mul	r22, r19
     dc6:	aa 27       	eor	r26, r26
     dc8:	f0 0d       	add	r31, r0
     dca:	b1 1d       	adc	r27, r1
     dcc:	aa 1f       	adc	r26, r26
     dce:	64 9f       	mul	r22, r20
     dd0:	66 27       	eor	r22, r22
     dd2:	b0 0d       	add	r27, r0
     dd4:	a1 1d       	adc	r26, r1
     dd6:	66 1f       	adc	r22, r22
     dd8:	82 9f       	mul	r24, r18
     dda:	22 27       	eor	r18, r18
     ddc:	b0 0d       	add	r27, r0
     dde:	a1 1d       	adc	r26, r1
     de0:	62 1f       	adc	r22, r18
     de2:	73 9f       	mul	r23, r19
     de4:	b0 0d       	add	r27, r0
     de6:	a1 1d       	adc	r26, r1
     de8:	62 1f       	adc	r22, r18
     dea:	83 9f       	mul	r24, r19
     dec:	a0 0d       	add	r26, r0
     dee:	61 1d       	adc	r22, r1
     df0:	22 1f       	adc	r18, r18
     df2:	74 9f       	mul	r23, r20
     df4:	33 27       	eor	r19, r19
     df6:	a0 0d       	add	r26, r0
     df8:	61 1d       	adc	r22, r1
     dfa:	23 1f       	adc	r18, r19
     dfc:	84 9f       	mul	r24, r20
     dfe:	60 0d       	add	r22, r0
     e00:	21 1d       	adc	r18, r1
     e02:	82 2f       	mov	r24, r18
     e04:	76 2f       	mov	r23, r22
     e06:	6a 2f       	mov	r22, r26
     e08:	11 24       	eor	r1, r1
     e0a:	9f 57       	subi	r25, 0x7F	; 127
     e0c:	50 40       	sbci	r21, 0x00	; 0
     e0e:	9a f0       	brmi	.+38     	; 0xe36 <__mulsf3_pse+0x88>
     e10:	f1 f0       	breq	.+60     	; 0xe4e <__mulsf3_pse+0xa0>
     e12:	88 23       	and	r24, r24
     e14:	4a f0       	brmi	.+18     	; 0xe28 <__mulsf3_pse+0x7a>
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	bb 1f       	adc	r27, r27
     e1c:	66 1f       	adc	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	91 50       	subi	r25, 0x01	; 1
     e24:	50 40       	sbci	r21, 0x00	; 0
     e26:	a9 f7       	brne	.-22     	; 0xe12 <__mulsf3_pse+0x64>
     e28:	9e 3f       	cpi	r25, 0xFE	; 254
     e2a:	51 05       	cpc	r21, r1
     e2c:	80 f0       	brcs	.+32     	; 0xe4e <__mulsf3_pse+0xa0>
     e2e:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
     e32:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
     e36:	5f 3f       	cpi	r21, 0xFF	; 255
     e38:	e4 f3       	brlt	.-8      	; 0xe32 <__mulsf3_pse+0x84>
     e3a:	98 3e       	cpi	r25, 0xE8	; 232
     e3c:	d4 f3       	brlt	.-12     	; 0xe32 <__mulsf3_pse+0x84>
     e3e:	86 95       	lsr	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	b7 95       	ror	r27
     e46:	f7 95       	ror	r31
     e48:	e7 95       	ror	r30
     e4a:	9f 5f       	subi	r25, 0xFF	; 255
     e4c:	c1 f7       	brne	.-16     	; 0xe3e <__mulsf3_pse+0x90>
     e4e:	fe 2b       	or	r31, r30
     e50:	88 0f       	add	r24, r24
     e52:	91 1d       	adc	r25, r1
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	97 f9       	bld	r25, 7
     e5a:	08 95       	ret

00000e5c <__divmodhi4>:
     e5c:	97 fb       	bst	r25, 7
     e5e:	07 2e       	mov	r0, r23
     e60:	16 f4       	brtc	.+4      	; 0xe66 <__divmodhi4+0xa>
     e62:	00 94       	com	r0
     e64:	07 d0       	rcall	.+14     	; 0xe74 <__divmodhi4_neg1>
     e66:	77 fd       	sbrc	r23, 7
     e68:	09 d0       	rcall	.+18     	; 0xe7c <__divmodhi4_neg2>
     e6a:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodhi4>
     e6e:	07 fc       	sbrc	r0, 7
     e70:	05 d0       	rcall	.+10     	; 0xe7c <__divmodhi4_neg2>
     e72:	3e f4       	brtc	.+14     	; 0xe82 <__divmodhi4_exit>

00000e74 <__divmodhi4_neg1>:
     e74:	90 95       	com	r25
     e76:	81 95       	neg	r24
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	08 95       	ret

00000e7c <__divmodhi4_neg2>:
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255

00000e82 <__divmodhi4_exit>:
     e82:	08 95       	ret

00000e84 <__udivmodsi4>:
     e84:	a1 e2       	ldi	r26, 0x21	; 33
     e86:	1a 2e       	mov	r1, r26
     e88:	aa 1b       	sub	r26, r26
     e8a:	bb 1b       	sub	r27, r27
     e8c:	fd 01       	movw	r30, r26
     e8e:	0d c0       	rjmp	.+26     	; 0xeaa <__udivmodsi4_ep>

00000e90 <__udivmodsi4_loop>:
     e90:	aa 1f       	adc	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	ee 1f       	adc	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	a2 17       	cp	r26, r18
     e9a:	b3 07       	cpc	r27, r19
     e9c:	e4 07       	cpc	r30, r20
     e9e:	f5 07       	cpc	r31, r21
     ea0:	20 f0       	brcs	.+8      	; 0xeaa <__udivmodsi4_ep>
     ea2:	a2 1b       	sub	r26, r18
     ea4:	b3 0b       	sbc	r27, r19
     ea6:	e4 0b       	sbc	r30, r20
     ea8:	f5 0b       	sbc	r31, r21

00000eaa <__udivmodsi4_ep>:
     eaa:	66 1f       	adc	r22, r22
     eac:	77 1f       	adc	r23, r23
     eae:	88 1f       	adc	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	1a 94       	dec	r1
     eb4:	69 f7       	brne	.-38     	; 0xe90 <__udivmodsi4_loop>
     eb6:	60 95       	com	r22
     eb8:	70 95       	com	r23
     eba:	80 95       	com	r24
     ebc:	90 95       	com	r25
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	bd 01       	movw	r22, r26
     ec4:	cf 01       	movw	r24, r30
     ec6:	08 95       	ret

00000ec8 <__udivmodhi4>:
     ec8:	aa 1b       	sub	r26, r26
     eca:	bb 1b       	sub	r27, r27
     ecc:	51 e1       	ldi	r21, 0x11	; 17
     ece:	07 c0       	rjmp	.+14     	; 0xede <__udivmodhi4_ep>

00000ed0 <__udivmodhi4_loop>:
     ed0:	aa 1f       	adc	r26, r26
     ed2:	bb 1f       	adc	r27, r27
     ed4:	a6 17       	cp	r26, r22
     ed6:	b7 07       	cpc	r27, r23
     ed8:	10 f0       	brcs	.+4      	; 0xede <__udivmodhi4_ep>
     eda:	a6 1b       	sub	r26, r22
     edc:	b7 0b       	sbc	r27, r23

00000ede <__udivmodhi4_ep>:
     ede:	88 1f       	adc	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	5a 95       	dec	r21
     ee4:	a9 f7       	brne	.-22     	; 0xed0 <__udivmodhi4_loop>
     ee6:	80 95       	com	r24
     ee8:	90 95       	com	r25
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	08 95       	ret

00000ef0 <atoi>:
     ef0:	fc 01       	movw	r30, r24
     ef2:	88 27       	eor	r24, r24
     ef4:	99 27       	eor	r25, r25
     ef6:	e8 94       	clt
     ef8:	21 91       	ld	r18, Z+
     efa:	20 32       	cpi	r18, 0x20	; 32
     efc:	e9 f3       	breq	.-6      	; 0xef8 <atoi+0x8>
     efe:	29 30       	cpi	r18, 0x09	; 9
     f00:	10 f0       	brcs	.+4      	; 0xf06 <atoi+0x16>
     f02:	2e 30       	cpi	r18, 0x0E	; 14
     f04:	c8 f3       	brcs	.-14     	; 0xef8 <atoi+0x8>
     f06:	2b 32       	cpi	r18, 0x2B	; 43
     f08:	41 f0       	breq	.+16     	; 0xf1a <atoi+0x2a>
     f0a:	2d 32       	cpi	r18, 0x2D	; 45
     f0c:	39 f4       	brne	.+14     	; 0xf1c <atoi+0x2c>
     f0e:	68 94       	set
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <atoi+0x2a>
     f12:	0e 94 cb 07 	call	0xf96	; 0xf96 <__mulhi_const_10>
     f16:	82 0f       	add	r24, r18
     f18:	91 1d       	adc	r25, r1
     f1a:	21 91       	ld	r18, Z+
     f1c:	20 53       	subi	r18, 0x30	; 48
     f1e:	2a 30       	cpi	r18, 0x0A	; 10
     f20:	c0 f3       	brcs	.-16     	; 0xf12 <atoi+0x22>
     f22:	1e f4       	brtc	.+6      	; 0xf2a <atoi+0x3a>
     f24:	90 95       	com	r25
     f26:	81 95       	neg	r24
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <strtok>:
     f2c:	40 ed       	ldi	r20, 0xD0	; 208
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	0e 94 a4 07 	call	0xf48	; 0xf48 <strtok_r>
     f34:	08 95       	ret

00000f36 <strcmp>:
     f36:	fb 01       	movw	r30, r22
     f38:	dc 01       	movw	r26, r24
     f3a:	8d 91       	ld	r24, X+
     f3c:	01 90       	ld	r0, Z+
     f3e:	80 19       	sub	r24, r0
     f40:	01 10       	cpse	r0, r1
     f42:	d9 f3       	breq	.-10     	; 0xf3a <strcmp+0x4>
     f44:	99 0b       	sbc	r25, r25
     f46:	08 95       	ret

00000f48 <strtok_r>:
     f48:	fa 01       	movw	r30, r20
     f4a:	a1 91       	ld	r26, Z+
     f4c:	b0 81       	ld	r27, Z
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	19 f4       	brne	.+6      	; 0xf58 <strtok_r+0x10>
     f52:	10 97       	sbiw	r26, 0x00	; 0
     f54:	e1 f0       	breq	.+56     	; 0xf8e <strtok_r+0x46>
     f56:	cd 01       	movw	r24, r26
     f58:	dc 01       	movw	r26, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	0d 90       	ld	r0, X+
     f5e:	00 20       	and	r0, r0
     f60:	11 f4       	brne	.+4      	; 0xf66 <strtok_r+0x1e>
     f62:	c0 01       	movw	r24, r0
     f64:	13 c0       	rjmp	.+38     	; 0xf8c <strtok_r+0x44>
     f66:	fb 01       	movw	r30, r22
     f68:	21 91       	ld	r18, Z+
     f6a:	22 23       	and	r18, r18
     f6c:	19 f0       	breq	.+6      	; 0xf74 <strtok_r+0x2c>
     f6e:	20 15       	cp	r18, r0
     f70:	d9 f7       	brne	.-10     	; 0xf68 <strtok_r+0x20>
     f72:	f3 cf       	rjmp	.-26     	; 0xf5a <strtok_r+0x12>
     f74:	fb 01       	movw	r30, r22
     f76:	21 91       	ld	r18, Z+
     f78:	20 15       	cp	r18, r0
     f7a:	19 f4       	brne	.+6      	; 0xf82 <strtok_r+0x3a>
     f7c:	1e 92       	st	-X, r1
     f7e:	11 96       	adiw	r26, 0x01	; 1
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <strtok_r+0x46>
     f82:	22 23       	and	r18, r18
     f84:	c1 f7       	brne	.-16     	; 0xf76 <strtok_r+0x2e>
     f86:	0d 90       	ld	r0, X+
     f88:	00 20       	and	r0, r0
     f8a:	a1 f7       	brne	.-24     	; 0xf74 <strtok_r+0x2c>
     f8c:	d0 01       	movw	r26, r0
     f8e:	fa 01       	movw	r30, r20
     f90:	a1 93       	st	Z+, r26
     f92:	b0 83       	st	Z, r27
     f94:	08 95       	ret

00000f96 <__mulhi_const_10>:
     f96:	7a e0       	ldi	r23, 0x0A	; 10
     f98:	97 9f       	mul	r25, r23
     f9a:	90 2d       	mov	r25, r0
     f9c:	87 9f       	mul	r24, r23
     f9e:	80 2d       	mov	r24, r0
     fa0:	91 0d       	add	r25, r1
     fa2:	11 24       	eor	r1, r1
     fa4:	08 95       	ret

00000fa6 <fdevopen>:
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	31 f4       	brne	.+12     	; 0xfbe <fdevopen+0x18>
     fb2:	61 15       	cp	r22, r1
     fb4:	71 05       	cpc	r23, r1
     fb6:	19 f4       	brne	.+6      	; 0xfbe <fdevopen+0x18>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	3a c0       	rjmp	.+116    	; 0x1032 <fdevopen+0x8c>
     fbe:	8b 01       	movw	r16, r22
     fc0:	ec 01       	movw	r28, r24
     fc2:	6e e0       	ldi	r22, 0x0E	; 14
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 15 0a 	call	0x142a	; 0x142a <calloc>
     fce:	fc 01       	movw	r30, r24
     fd0:	89 2b       	or	r24, r25
     fd2:	91 f3       	breq	.-28     	; 0xfb8 <fdevopen+0x12>
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	83 83       	std	Z+3, r24	; 0x03
     fd8:	01 15       	cp	r16, r1
     fda:	11 05       	cpc	r17, r1
     fdc:	71 f0       	breq	.+28     	; 0xffa <fdevopen+0x54>
     fde:	13 87       	std	Z+11, r17	; 0x0b
     fe0:	02 87       	std	Z+10, r16	; 0x0a
     fe2:	81 e8       	ldi	r24, 0x81	; 129
     fe4:	83 83       	std	Z+3, r24	; 0x03
     fe6:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <__iob>
     fea:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <__iob+0x1>
     fee:	89 2b       	or	r24, r25
     ff0:	21 f4       	brne	.+8      	; 0xffa <fdevopen+0x54>
     ff2:	f0 93 df 03 	sts	0x03DF, r31	; 0x8003df <__iob+0x1>
     ff6:	e0 93 de 03 	sts	0x03DE, r30	; 0x8003de <__iob>
     ffa:	20 97       	sbiw	r28, 0x00	; 0
     ffc:	c9 f0       	breq	.+50     	; 0x1030 <fdevopen+0x8a>
     ffe:	d1 87       	std	Z+9, r29	; 0x09
    1000:	c0 87       	std	Z+8, r28	; 0x08
    1002:	83 81       	ldd	r24, Z+3	; 0x03
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	83 83       	std	Z+3, r24	; 0x03
    1008:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <__iob+0x2>
    100c:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <__iob+0x3>
    1010:	89 2b       	or	r24, r25
    1012:	71 f4       	brne	.+28     	; 0x1030 <fdevopen+0x8a>
    1014:	f0 93 e1 03 	sts	0x03E1, r31	; 0x8003e1 <__iob+0x3>
    1018:	e0 93 e0 03 	sts	0x03E0, r30	; 0x8003e0 <__iob+0x2>
    101c:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <__iob+0x4>
    1020:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <__iob+0x5>
    1024:	89 2b       	or	r24, r25
    1026:	21 f4       	brne	.+8      	; 0x1030 <fdevopen+0x8a>
    1028:	f0 93 e3 03 	sts	0x03E3, r31	; 0x8003e3 <__iob+0x5>
    102c:	e0 93 e2 03 	sts	0x03E2, r30	; 0x8003e2 <__iob+0x4>
    1030:	cf 01       	movw	r24, r30
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <printf>:
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e2       	ldi	r30, 0x24	; 36
    1042:	f8 e0       	ldi	r31, 0x08	; 8
    1044:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__prologue_saves__+0x20>
    1048:	ae 01       	movw	r20, r28
    104a:	4b 5f       	subi	r20, 0xFB	; 251
    104c:	5f 4f       	sbci	r21, 0xFF	; 255
    104e:	fa 01       	movw	r30, r20
    1050:	61 91       	ld	r22, Z+
    1052:	71 91       	ld	r23, Z+
    1054:	af 01       	movw	r20, r30
    1056:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <__iob+0x2>
    105a:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <__iob+0x3>
    105e:	0e 94 34 08 	call	0x1068	; 0x1068 <vfprintf>
    1062:	e2 e0       	ldi	r30, 0x02	; 2
    1064:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__epilogue_restores__+0x20>

00001068 <vfprintf>:
    1068:	ab e0       	ldi	r26, 0x0B	; 11
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__prologue_saves__>
    1074:	6c 01       	movw	r12, r24
    1076:	7b 01       	movw	r14, r22
    1078:	8a 01       	movw	r16, r20
    107a:	fc 01       	movw	r30, r24
    107c:	17 82       	std	Z+7, r1	; 0x07
    107e:	16 82       	std	Z+6, r1	; 0x06
    1080:	83 81       	ldd	r24, Z+3	; 0x03
    1082:	81 ff       	sbrs	r24, 1
    1084:	cc c1       	rjmp	.+920    	; 0x141e <vfprintf+0x3b6>
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	3c 01       	movw	r6, r24
    108c:	f6 01       	movw	r30, r12
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	f7 01       	movw	r30, r14
    1092:	93 fd       	sbrc	r25, 3
    1094:	85 91       	lpm	r24, Z+
    1096:	93 ff       	sbrs	r25, 3
    1098:	81 91       	ld	r24, Z+
    109a:	7f 01       	movw	r14, r30
    109c:	88 23       	and	r24, r24
    109e:	09 f4       	brne	.+2      	; 0x10a2 <vfprintf+0x3a>
    10a0:	ba c1       	rjmp	.+884    	; 0x1416 <vfprintf+0x3ae>
    10a2:	85 32       	cpi	r24, 0x25	; 37
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <vfprintf+0x4c>
    10a6:	93 fd       	sbrc	r25, 3
    10a8:	85 91       	lpm	r24, Z+
    10aa:	93 ff       	sbrs	r25, 3
    10ac:	81 91       	ld	r24, Z+
    10ae:	7f 01       	movw	r14, r30
    10b0:	85 32       	cpi	r24, 0x25	; 37
    10b2:	29 f4       	brne	.+10     	; 0x10be <vfprintf+0x56>
    10b4:	b6 01       	movw	r22, r12
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    10bc:	e7 cf       	rjmp	.-50     	; 0x108c <vfprintf+0x24>
    10be:	91 2c       	mov	r9, r1
    10c0:	21 2c       	mov	r2, r1
    10c2:	31 2c       	mov	r3, r1
    10c4:	ff e1       	ldi	r31, 0x1F	; 31
    10c6:	f3 15       	cp	r31, r3
    10c8:	d8 f0       	brcs	.+54     	; 0x1100 <vfprintf+0x98>
    10ca:	8b 32       	cpi	r24, 0x2B	; 43
    10cc:	79 f0       	breq	.+30     	; 0x10ec <vfprintf+0x84>
    10ce:	38 f4       	brcc	.+14     	; 0x10de <vfprintf+0x76>
    10d0:	80 32       	cpi	r24, 0x20	; 32
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <vfprintf+0x8a>
    10d4:	83 32       	cpi	r24, 0x23	; 35
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <vfprintf+0x98>
    10d8:	23 2d       	mov	r18, r3
    10da:	20 61       	ori	r18, 0x10	; 16
    10dc:	1d c0       	rjmp	.+58     	; 0x1118 <vfprintf+0xb0>
    10de:	8d 32       	cpi	r24, 0x2D	; 45
    10e0:	61 f0       	breq	.+24     	; 0x10fa <vfprintf+0x92>
    10e2:	80 33       	cpi	r24, 0x30	; 48
    10e4:	69 f4       	brne	.+26     	; 0x1100 <vfprintf+0x98>
    10e6:	23 2d       	mov	r18, r3
    10e8:	21 60       	ori	r18, 0x01	; 1
    10ea:	16 c0       	rjmp	.+44     	; 0x1118 <vfprintf+0xb0>
    10ec:	83 2d       	mov	r24, r3
    10ee:	82 60       	ori	r24, 0x02	; 2
    10f0:	38 2e       	mov	r3, r24
    10f2:	e3 2d       	mov	r30, r3
    10f4:	e4 60       	ori	r30, 0x04	; 4
    10f6:	3e 2e       	mov	r3, r30
    10f8:	2a c0       	rjmp	.+84     	; 0x114e <vfprintf+0xe6>
    10fa:	f3 2d       	mov	r31, r3
    10fc:	f8 60       	ori	r31, 0x08	; 8
    10fe:	1d c0       	rjmp	.+58     	; 0x113a <vfprintf+0xd2>
    1100:	37 fc       	sbrc	r3, 7
    1102:	2d c0       	rjmp	.+90     	; 0x115e <vfprintf+0xf6>
    1104:	20 ed       	ldi	r18, 0xD0	; 208
    1106:	28 0f       	add	r18, r24
    1108:	2a 30       	cpi	r18, 0x0A	; 10
    110a:	40 f0       	brcs	.+16     	; 0x111c <vfprintf+0xb4>
    110c:	8e 32       	cpi	r24, 0x2E	; 46
    110e:	b9 f4       	brne	.+46     	; 0x113e <vfprintf+0xd6>
    1110:	36 fc       	sbrc	r3, 6
    1112:	81 c1       	rjmp	.+770    	; 0x1416 <vfprintf+0x3ae>
    1114:	23 2d       	mov	r18, r3
    1116:	20 64       	ori	r18, 0x40	; 64
    1118:	32 2e       	mov	r3, r18
    111a:	19 c0       	rjmp	.+50     	; 0x114e <vfprintf+0xe6>
    111c:	36 fe       	sbrs	r3, 6
    111e:	06 c0       	rjmp	.+12     	; 0x112c <vfprintf+0xc4>
    1120:	8a e0       	ldi	r24, 0x0A	; 10
    1122:	98 9e       	mul	r9, r24
    1124:	20 0d       	add	r18, r0
    1126:	11 24       	eor	r1, r1
    1128:	92 2e       	mov	r9, r18
    112a:	11 c0       	rjmp	.+34     	; 0x114e <vfprintf+0xe6>
    112c:	ea e0       	ldi	r30, 0x0A	; 10
    112e:	2e 9e       	mul	r2, r30
    1130:	20 0d       	add	r18, r0
    1132:	11 24       	eor	r1, r1
    1134:	22 2e       	mov	r2, r18
    1136:	f3 2d       	mov	r31, r3
    1138:	f0 62       	ori	r31, 0x20	; 32
    113a:	3f 2e       	mov	r3, r31
    113c:	08 c0       	rjmp	.+16     	; 0x114e <vfprintf+0xe6>
    113e:	8c 36       	cpi	r24, 0x6C	; 108
    1140:	21 f4       	brne	.+8      	; 0x114a <vfprintf+0xe2>
    1142:	83 2d       	mov	r24, r3
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	38 2e       	mov	r3, r24
    1148:	02 c0       	rjmp	.+4      	; 0x114e <vfprintf+0xe6>
    114a:	88 36       	cpi	r24, 0x68	; 104
    114c:	41 f4       	brne	.+16     	; 0x115e <vfprintf+0xf6>
    114e:	f7 01       	movw	r30, r14
    1150:	93 fd       	sbrc	r25, 3
    1152:	85 91       	lpm	r24, Z+
    1154:	93 ff       	sbrs	r25, 3
    1156:	81 91       	ld	r24, Z+
    1158:	7f 01       	movw	r14, r30
    115a:	81 11       	cpse	r24, r1
    115c:	b3 cf       	rjmp	.-154    	; 0x10c4 <vfprintf+0x5c>
    115e:	98 2f       	mov	r25, r24
    1160:	9f 7d       	andi	r25, 0xDF	; 223
    1162:	95 54       	subi	r25, 0x45	; 69
    1164:	93 30       	cpi	r25, 0x03	; 3
    1166:	28 f4       	brcc	.+10     	; 0x1172 <vfprintf+0x10a>
    1168:	0c 5f       	subi	r16, 0xFC	; 252
    116a:	1f 4f       	sbci	r17, 0xFF	; 255
    116c:	9f e3       	ldi	r25, 0x3F	; 63
    116e:	99 83       	std	Y+1, r25	; 0x01
    1170:	0d c0       	rjmp	.+26     	; 0x118c <vfprintf+0x124>
    1172:	83 36       	cpi	r24, 0x63	; 99
    1174:	31 f0       	breq	.+12     	; 0x1182 <vfprintf+0x11a>
    1176:	83 37       	cpi	r24, 0x73	; 115
    1178:	71 f0       	breq	.+28     	; 0x1196 <vfprintf+0x12e>
    117a:	83 35       	cpi	r24, 0x53	; 83
    117c:	09 f0       	breq	.+2      	; 0x1180 <vfprintf+0x118>
    117e:	59 c0       	rjmp	.+178    	; 0x1232 <vfprintf+0x1ca>
    1180:	21 c0       	rjmp	.+66     	; 0x11c4 <vfprintf+0x15c>
    1182:	f8 01       	movw	r30, r16
    1184:	80 81       	ld	r24, Z
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	0e 5f       	subi	r16, 0xFE	; 254
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	88 24       	eor	r8, r8
    118e:	83 94       	inc	r8
    1190:	91 2c       	mov	r9, r1
    1192:	53 01       	movw	r10, r6
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <vfprintf+0x154>
    1196:	28 01       	movw	r4, r16
    1198:	f2 e0       	ldi	r31, 0x02	; 2
    119a:	4f 0e       	add	r4, r31
    119c:	51 1c       	adc	r5, r1
    119e:	f8 01       	movw	r30, r16
    11a0:	a0 80       	ld	r10, Z
    11a2:	b1 80       	ldd	r11, Z+1	; 0x01
    11a4:	36 fe       	sbrs	r3, 6
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <vfprintf+0x146>
    11a8:	69 2d       	mov	r22, r9
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <vfprintf+0x14a>
    11ae:	6f ef       	ldi	r22, 0xFF	; 255
    11b0:	7f ef       	ldi	r23, 0xFF	; 255
    11b2:	c5 01       	movw	r24, r10
    11b4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <strnlen>
    11b8:	4c 01       	movw	r8, r24
    11ba:	82 01       	movw	r16, r4
    11bc:	f3 2d       	mov	r31, r3
    11be:	ff 77       	andi	r31, 0x7F	; 127
    11c0:	3f 2e       	mov	r3, r31
    11c2:	16 c0       	rjmp	.+44     	; 0x11f0 <vfprintf+0x188>
    11c4:	28 01       	movw	r4, r16
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	42 0e       	add	r4, r18
    11ca:	51 1c       	adc	r5, r1
    11cc:	f8 01       	movw	r30, r16
    11ce:	a0 80       	ld	r10, Z
    11d0:	b1 80       	ldd	r11, Z+1	; 0x01
    11d2:	36 fe       	sbrs	r3, 6
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <vfprintf+0x174>
    11d6:	69 2d       	mov	r22, r9
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0x178>
    11dc:	6f ef       	ldi	r22, 0xFF	; 255
    11de:	7f ef       	ldi	r23, 0xFF	; 255
    11e0:	c5 01       	movw	r24, r10
    11e2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strnlen_P>
    11e6:	4c 01       	movw	r8, r24
    11e8:	f3 2d       	mov	r31, r3
    11ea:	f0 68       	ori	r31, 0x80	; 128
    11ec:	3f 2e       	mov	r3, r31
    11ee:	82 01       	movw	r16, r4
    11f0:	33 fc       	sbrc	r3, 3
    11f2:	1b c0       	rjmp	.+54     	; 0x122a <vfprintf+0x1c2>
    11f4:	82 2d       	mov	r24, r2
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	88 16       	cp	r8, r24
    11fa:	99 06       	cpc	r9, r25
    11fc:	b0 f4       	brcc	.+44     	; 0x122a <vfprintf+0x1c2>
    11fe:	b6 01       	movw	r22, r12
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    1208:	2a 94       	dec	r2
    120a:	f4 cf       	rjmp	.-24     	; 0x11f4 <vfprintf+0x18c>
    120c:	f5 01       	movw	r30, r10
    120e:	37 fc       	sbrc	r3, 7
    1210:	85 91       	lpm	r24, Z+
    1212:	37 fe       	sbrs	r3, 7
    1214:	81 91       	ld	r24, Z+
    1216:	5f 01       	movw	r10, r30
    1218:	b6 01       	movw	r22, r12
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    1220:	21 10       	cpse	r2, r1
    1222:	2a 94       	dec	r2
    1224:	21 e0       	ldi	r18, 0x01	; 1
    1226:	82 1a       	sub	r8, r18
    1228:	91 08       	sbc	r9, r1
    122a:	81 14       	cp	r8, r1
    122c:	91 04       	cpc	r9, r1
    122e:	71 f7       	brne	.-36     	; 0x120c <vfprintf+0x1a4>
    1230:	e8 c0       	rjmp	.+464    	; 0x1402 <vfprintf+0x39a>
    1232:	84 36       	cpi	r24, 0x64	; 100
    1234:	11 f0       	breq	.+4      	; 0x123a <vfprintf+0x1d2>
    1236:	89 36       	cpi	r24, 0x69	; 105
    1238:	41 f5       	brne	.+80     	; 0x128a <vfprintf+0x222>
    123a:	f8 01       	movw	r30, r16
    123c:	37 fe       	sbrs	r3, 7
    123e:	07 c0       	rjmp	.+14     	; 0x124e <vfprintf+0x1e6>
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	0c 5f       	subi	r16, 0xFC	; 252
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
    124c:	08 c0       	rjmp	.+16     	; 0x125e <vfprintf+0x1f6>
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	07 2e       	mov	r0, r23
    1254:	00 0c       	add	r0, r0
    1256:	88 0b       	sbc	r24, r24
    1258:	99 0b       	sbc	r25, r25
    125a:	0e 5f       	subi	r16, 0xFE	; 254
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	f3 2d       	mov	r31, r3
    1260:	ff 76       	andi	r31, 0x6F	; 111
    1262:	3f 2e       	mov	r3, r31
    1264:	97 ff       	sbrs	r25, 7
    1266:	09 c0       	rjmp	.+18     	; 0x127a <vfprintf+0x212>
    1268:	90 95       	com	r25
    126a:	80 95       	com	r24
    126c:	70 95       	com	r23
    126e:	61 95       	neg	r22
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	f0 68       	ori	r31, 0x80	; 128
    1278:	3f 2e       	mov	r3, r31
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	a3 01       	movw	r20, r6
    1280:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__ultoa_invert>
    1284:	88 2e       	mov	r8, r24
    1286:	86 18       	sub	r8, r6
    1288:	45 c0       	rjmp	.+138    	; 0x1314 <vfprintf+0x2ac>
    128a:	85 37       	cpi	r24, 0x75	; 117
    128c:	31 f4       	brne	.+12     	; 0x129a <vfprintf+0x232>
    128e:	23 2d       	mov	r18, r3
    1290:	2f 7e       	andi	r18, 0xEF	; 239
    1292:	b2 2e       	mov	r11, r18
    1294:	2a e0       	ldi	r18, 0x0A	; 10
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	25 c0       	rjmp	.+74     	; 0x12e4 <vfprintf+0x27c>
    129a:	93 2d       	mov	r25, r3
    129c:	99 7f       	andi	r25, 0xF9	; 249
    129e:	b9 2e       	mov	r11, r25
    12a0:	8f 36       	cpi	r24, 0x6F	; 111
    12a2:	c1 f0       	breq	.+48     	; 0x12d4 <vfprintf+0x26c>
    12a4:	18 f4       	brcc	.+6      	; 0x12ac <vfprintf+0x244>
    12a6:	88 35       	cpi	r24, 0x58	; 88
    12a8:	79 f0       	breq	.+30     	; 0x12c8 <vfprintf+0x260>
    12aa:	b5 c0       	rjmp	.+362    	; 0x1416 <vfprintf+0x3ae>
    12ac:	80 37       	cpi	r24, 0x70	; 112
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <vfprintf+0x24e>
    12b0:	88 37       	cpi	r24, 0x78	; 120
    12b2:	21 f0       	breq	.+8      	; 0x12bc <vfprintf+0x254>
    12b4:	b0 c0       	rjmp	.+352    	; 0x1416 <vfprintf+0x3ae>
    12b6:	e9 2f       	mov	r30, r25
    12b8:	e0 61       	ori	r30, 0x10	; 16
    12ba:	be 2e       	mov	r11, r30
    12bc:	b4 fe       	sbrs	r11, 4
    12be:	0d c0       	rjmp	.+26     	; 0x12da <vfprintf+0x272>
    12c0:	fb 2d       	mov	r31, r11
    12c2:	f4 60       	ori	r31, 0x04	; 4
    12c4:	bf 2e       	mov	r11, r31
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <vfprintf+0x272>
    12c8:	34 fe       	sbrs	r3, 4
    12ca:	0a c0       	rjmp	.+20     	; 0x12e0 <vfprintf+0x278>
    12cc:	29 2f       	mov	r18, r25
    12ce:	26 60       	ori	r18, 0x06	; 6
    12d0:	b2 2e       	mov	r11, r18
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <vfprintf+0x278>
    12d4:	28 e0       	ldi	r18, 0x08	; 8
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	05 c0       	rjmp	.+10     	; 0x12e4 <vfprintf+0x27c>
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <vfprintf+0x27c>
    12e0:	20 e1       	ldi	r18, 0x10	; 16
    12e2:	32 e0       	ldi	r19, 0x02	; 2
    12e4:	f8 01       	movw	r30, r16
    12e6:	b7 fe       	sbrs	r11, 7
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <vfprintf+0x290>
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	0c 5f       	subi	r16, 0xFC	; 252
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <vfprintf+0x29c>
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 5f       	subi	r16, 0xFE	; 254
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	a3 01       	movw	r20, r6
    1306:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__ultoa_invert>
    130a:	88 2e       	mov	r8, r24
    130c:	86 18       	sub	r8, r6
    130e:	fb 2d       	mov	r31, r11
    1310:	ff 77       	andi	r31, 0x7F	; 127
    1312:	3f 2e       	mov	r3, r31
    1314:	36 fe       	sbrs	r3, 6
    1316:	0d c0       	rjmp	.+26     	; 0x1332 <vfprintf+0x2ca>
    1318:	23 2d       	mov	r18, r3
    131a:	2e 7f       	andi	r18, 0xFE	; 254
    131c:	a2 2e       	mov	r10, r18
    131e:	89 14       	cp	r8, r9
    1320:	58 f4       	brcc	.+22     	; 0x1338 <vfprintf+0x2d0>
    1322:	34 fe       	sbrs	r3, 4
    1324:	0b c0       	rjmp	.+22     	; 0x133c <vfprintf+0x2d4>
    1326:	32 fc       	sbrc	r3, 2
    1328:	09 c0       	rjmp	.+18     	; 0x133c <vfprintf+0x2d4>
    132a:	83 2d       	mov	r24, r3
    132c:	8e 7e       	andi	r24, 0xEE	; 238
    132e:	a8 2e       	mov	r10, r24
    1330:	05 c0       	rjmp	.+10     	; 0x133c <vfprintf+0x2d4>
    1332:	b8 2c       	mov	r11, r8
    1334:	a3 2c       	mov	r10, r3
    1336:	03 c0       	rjmp	.+6      	; 0x133e <vfprintf+0x2d6>
    1338:	b8 2c       	mov	r11, r8
    133a:	01 c0       	rjmp	.+2      	; 0x133e <vfprintf+0x2d6>
    133c:	b9 2c       	mov	r11, r9
    133e:	a4 fe       	sbrs	r10, 4
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <vfprintf+0x2f8>
    1342:	fe 01       	movw	r30, r28
    1344:	e8 0d       	add	r30, r8
    1346:	f1 1d       	adc	r31, r1
    1348:	80 81       	ld	r24, Z
    134a:	80 33       	cpi	r24, 0x30	; 48
    134c:	21 f4       	brne	.+8      	; 0x1356 <vfprintf+0x2ee>
    134e:	9a 2d       	mov	r25, r10
    1350:	99 7e       	andi	r25, 0xE9	; 233
    1352:	a9 2e       	mov	r10, r25
    1354:	09 c0       	rjmp	.+18     	; 0x1368 <vfprintf+0x300>
    1356:	a2 fe       	sbrs	r10, 2
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <vfprintf+0x2fe>
    135a:	b3 94       	inc	r11
    135c:	b3 94       	inc	r11
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <vfprintf+0x300>
    1360:	8a 2d       	mov	r24, r10
    1362:	86 78       	andi	r24, 0x86	; 134
    1364:	09 f0       	breq	.+2      	; 0x1368 <vfprintf+0x300>
    1366:	b3 94       	inc	r11
    1368:	a3 fc       	sbrc	r10, 3
    136a:	11 c0       	rjmp	.+34     	; 0x138e <vfprintf+0x326>
    136c:	a0 fe       	sbrs	r10, 0
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0x314>
    1370:	b2 14       	cp	r11, r2
    1372:	88 f4       	brcc	.+34     	; 0x1396 <vfprintf+0x32e>
    1374:	28 0c       	add	r2, r8
    1376:	92 2c       	mov	r9, r2
    1378:	9b 18       	sub	r9, r11
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <vfprintf+0x330>
    137c:	b2 14       	cp	r11, r2
    137e:	60 f4       	brcc	.+24     	; 0x1398 <vfprintf+0x330>
    1380:	b6 01       	movw	r22, r12
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    138a:	b3 94       	inc	r11
    138c:	f7 cf       	rjmp	.-18     	; 0x137c <vfprintf+0x314>
    138e:	b2 14       	cp	r11, r2
    1390:	18 f4       	brcc	.+6      	; 0x1398 <vfprintf+0x330>
    1392:	2b 18       	sub	r2, r11
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x332>
    1396:	98 2c       	mov	r9, r8
    1398:	21 2c       	mov	r2, r1
    139a:	a4 fe       	sbrs	r10, 4
    139c:	10 c0       	rjmp	.+32     	; 0x13be <vfprintf+0x356>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    13a8:	a2 fe       	sbrs	r10, 2
    13aa:	17 c0       	rjmp	.+46     	; 0x13da <vfprintf+0x372>
    13ac:	a1 fc       	sbrc	r10, 1
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <vfprintf+0x34e>
    13b0:	88 e7       	ldi	r24, 0x78	; 120
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <vfprintf+0x352>
    13b6:	88 e5       	ldi	r24, 0x58	; 88
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	b6 01       	movw	r22, r12
    13bc:	0c c0       	rjmp	.+24     	; 0x13d6 <vfprintf+0x36e>
    13be:	8a 2d       	mov	r24, r10
    13c0:	86 78       	andi	r24, 0x86	; 134
    13c2:	59 f0       	breq	.+22     	; 0x13da <vfprintf+0x372>
    13c4:	a1 fe       	sbrs	r10, 1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x364>
    13c8:	8b e2       	ldi	r24, 0x2B	; 43
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <vfprintf+0x366>
    13cc:	80 e2       	ldi	r24, 0x20	; 32
    13ce:	a7 fc       	sbrc	r10, 7
    13d0:	8d e2       	ldi	r24, 0x2D	; 45
    13d2:	b6 01       	movw	r22, r12
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    13da:	89 14       	cp	r8, r9
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <vfprintf+0x384>
    13de:	b6 01       	movw	r22, r12
    13e0:	80 e3       	ldi	r24, 0x30	; 48
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    13e8:	9a 94       	dec	r9
    13ea:	f7 cf       	rjmp	.-18     	; 0x13da <vfprintf+0x372>
    13ec:	8a 94       	dec	r8
    13ee:	f3 01       	movw	r30, r6
    13f0:	e8 0d       	add	r30, r8
    13f2:	f1 1d       	adc	r31, r1
    13f4:	80 81       	ld	r24, Z
    13f6:	b6 01       	movw	r22, r12
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    13fe:	81 10       	cpse	r8, r1
    1400:	f5 cf       	rjmp	.-22     	; 0x13ec <vfprintf+0x384>
    1402:	22 20       	and	r2, r2
    1404:	09 f4       	brne	.+2      	; 0x1408 <vfprintf+0x3a0>
    1406:	42 ce       	rjmp	.-892    	; 0x108c <vfprintf+0x24>
    1408:	b6 01       	movw	r22, r12
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 6f 0b 	call	0x16de	; 0x16de <fputc>
    1412:	2a 94       	dec	r2
    1414:	f6 cf       	rjmp	.-20     	; 0x1402 <vfprintf+0x39a>
    1416:	f6 01       	movw	r30, r12
    1418:	86 81       	ldd	r24, Z+6	; 0x06
    141a:	97 81       	ldd	r25, Z+7	; 0x07
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <vfprintf+0x3ba>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	9f ef       	ldi	r25, 0xFF	; 255
    1422:	2b 96       	adiw	r28, 0x0b	; 11
    1424:	e2 e1       	ldi	r30, 0x12	; 18
    1426:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__epilogue_restores__>

0000142a <calloc>:
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	86 9f       	mul	r24, r22
    1434:	80 01       	movw	r16, r0
    1436:	87 9f       	mul	r24, r23
    1438:	10 0d       	add	r17, r0
    143a:	96 9f       	mul	r25, r22
    143c:	10 0d       	add	r17, r0
    143e:	11 24       	eor	r1, r1
    1440:	c8 01       	movw	r24, r16
    1442:	0e 94 31 0a 	call	0x1462	; 0x1462 <malloc>
    1446:	ec 01       	movw	r28, r24
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	29 f0       	breq	.+10     	; 0x1456 <calloc+0x2c>
    144c:	a8 01       	movw	r20, r16
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <memset>
    1456:	ce 01       	movw	r24, r28
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <malloc>:
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	91 05       	cpc	r25, r1
    146e:	10 f4       	brcc	.+4      	; 0x1474 <malloc+0x12>
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <__flp>
    1478:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <__flp+0x1>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	a0 e0       	ldi	r26, 0x00	; 0
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	30 97       	sbiw	r30, 0x00	; 0
    1486:	19 f1       	breq	.+70     	; 0x14ce <malloc+0x6c>
    1488:	40 81       	ld	r20, Z
    148a:	51 81       	ldd	r21, Z+1	; 0x01
    148c:	02 81       	ldd	r16, Z+2	; 0x02
    148e:	13 81       	ldd	r17, Z+3	; 0x03
    1490:	48 17       	cp	r20, r24
    1492:	59 07       	cpc	r21, r25
    1494:	c8 f0       	brcs	.+50     	; 0x14c8 <malloc+0x66>
    1496:	84 17       	cp	r24, r20
    1498:	95 07       	cpc	r25, r21
    149a:	69 f4       	brne	.+26     	; 0x14b6 <malloc+0x54>
    149c:	10 97       	sbiw	r26, 0x00	; 0
    149e:	31 f0       	breq	.+12     	; 0x14ac <malloc+0x4a>
    14a0:	12 96       	adiw	r26, 0x02	; 2
    14a2:	0c 93       	st	X, r16
    14a4:	12 97       	sbiw	r26, 0x02	; 2
    14a6:	13 96       	adiw	r26, 0x03	; 3
    14a8:	1c 93       	st	X, r17
    14aa:	27 c0       	rjmp	.+78     	; 0x14fa <malloc+0x98>
    14ac:	00 93 e6 03 	sts	0x03E6, r16	; 0x8003e6 <__flp>
    14b0:	10 93 e7 03 	sts	0x03E7, r17	; 0x8003e7 <__flp+0x1>
    14b4:	22 c0       	rjmp	.+68     	; 0x14fa <malloc+0x98>
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <malloc+0x60>
    14bc:	42 17       	cp	r20, r18
    14be:	53 07       	cpc	r21, r19
    14c0:	18 f4       	brcc	.+6      	; 0x14c8 <malloc+0x66>
    14c2:	9a 01       	movw	r18, r20
    14c4:	bd 01       	movw	r22, r26
    14c6:	ef 01       	movw	r28, r30
    14c8:	df 01       	movw	r26, r30
    14ca:	f8 01       	movw	r30, r16
    14cc:	db cf       	rjmp	.-74     	; 0x1484 <malloc+0x22>
    14ce:	21 15       	cp	r18, r1
    14d0:	31 05       	cpc	r19, r1
    14d2:	f9 f0       	breq	.+62     	; 0x1512 <malloc+0xb0>
    14d4:	28 1b       	sub	r18, r24
    14d6:	39 0b       	sbc	r19, r25
    14d8:	24 30       	cpi	r18, 0x04	; 4
    14da:	31 05       	cpc	r19, r1
    14dc:	80 f4       	brcc	.+32     	; 0x14fe <malloc+0x9c>
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	61 15       	cp	r22, r1
    14e4:	71 05       	cpc	r23, r1
    14e6:	21 f0       	breq	.+8      	; 0x14f0 <malloc+0x8e>
    14e8:	fb 01       	movw	r30, r22
    14ea:	93 83       	std	Z+3, r25	; 0x03
    14ec:	82 83       	std	Z+2, r24	; 0x02
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <malloc+0x96>
    14f0:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <__flp+0x1>
    14f4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <__flp>
    14f8:	fe 01       	movw	r30, r28
    14fa:	32 96       	adiw	r30, 0x02	; 2
    14fc:	44 c0       	rjmp	.+136    	; 0x1586 <malloc+0x124>
    14fe:	fe 01       	movw	r30, r28
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	81 93       	st	Z+, r24
    1506:	91 93       	st	Z+, r25
    1508:	22 50       	subi	r18, 0x02	; 2
    150a:	31 09       	sbc	r19, r1
    150c:	39 83       	std	Y+1, r19	; 0x01
    150e:	28 83       	st	Y, r18
    1510:	3a c0       	rjmp	.+116    	; 0x1586 <malloc+0x124>
    1512:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    1516:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    151a:	23 2b       	or	r18, r19
    151c:	41 f4       	brne	.+16     	; 0x152e <malloc+0xcc>
    151e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1522:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1526:	30 93 e5 03 	sts	0x03E5, r19	; 0x8003e5 <__brkval+0x1>
    152a:	20 93 e4 03 	sts	0x03E4, r18	; 0x8003e4 <__brkval>
    152e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1532:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1536:	21 15       	cp	r18, r1
    1538:	31 05       	cpc	r19, r1
    153a:	41 f4       	brne	.+16     	; 0x154c <malloc+0xea>
    153c:	2d b7       	in	r18, 0x3d	; 61
    153e:	3e b7       	in	r19, 0x3e	; 62
    1540:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1544:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1548:	24 1b       	sub	r18, r20
    154a:	35 0b       	sbc	r19, r21
    154c:	e0 91 e4 03 	lds	r30, 0x03E4	; 0x8003e4 <__brkval>
    1550:	f0 91 e5 03 	lds	r31, 0x03E5	; 0x8003e5 <__brkval+0x1>
    1554:	e2 17       	cp	r30, r18
    1556:	f3 07       	cpc	r31, r19
    1558:	a0 f4       	brcc	.+40     	; 0x1582 <malloc+0x120>
    155a:	2e 1b       	sub	r18, r30
    155c:	3f 0b       	sbc	r19, r31
    155e:	28 17       	cp	r18, r24
    1560:	39 07       	cpc	r19, r25
    1562:	78 f0       	brcs	.+30     	; 0x1582 <malloc+0x120>
    1564:	ac 01       	movw	r20, r24
    1566:	4e 5f       	subi	r20, 0xFE	; 254
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	24 17       	cp	r18, r20
    156c:	35 07       	cpc	r19, r21
    156e:	48 f0       	brcs	.+18     	; 0x1582 <malloc+0x120>
    1570:	4e 0f       	add	r20, r30
    1572:	5f 1f       	adc	r21, r31
    1574:	50 93 e5 03 	sts	0x03E5, r21	; 0x8003e5 <__brkval+0x1>
    1578:	40 93 e4 03 	sts	0x03E4, r20	; 0x8003e4 <__brkval>
    157c:	81 93       	st	Z+, r24
    157e:	91 93       	st	Z+, r25
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <malloc+0x124>
    1582:	e0 e0       	ldi	r30, 0x00	; 0
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	cf 01       	movw	r24, r30
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <free>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	09 f4       	brne	.+2      	; 0x159c <free+0xa>
    159a:	81 c0       	rjmp	.+258    	; 0x169e <free+0x10c>
    159c:	fc 01       	movw	r30, r24
    159e:	32 97       	sbiw	r30, 0x02	; 2
    15a0:	13 82       	std	Z+3, r1	; 0x03
    15a2:	12 82       	std	Z+2, r1	; 0x02
    15a4:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <__flp>
    15a8:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <__flp+0x1>
    15ac:	10 97       	sbiw	r26, 0x00	; 0
    15ae:	81 f4       	brne	.+32     	; 0x15d0 <free+0x3e>
    15b0:	20 81       	ld	r18, Z
    15b2:	31 81       	ldd	r19, Z+1	; 0x01
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    15bc:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    15c0:	28 17       	cp	r18, r24
    15c2:	39 07       	cpc	r19, r25
    15c4:	51 f5       	brne	.+84     	; 0x161a <free+0x88>
    15c6:	f0 93 e5 03 	sts	0x03E5, r31	; 0x8003e5 <__brkval+0x1>
    15ca:	e0 93 e4 03 	sts	0x03E4, r30	; 0x8003e4 <__brkval>
    15ce:	67 c0       	rjmp	.+206    	; 0x169e <free+0x10c>
    15d0:	ed 01       	movw	r28, r26
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	ce 17       	cp	r28, r30
    15d8:	df 07       	cpc	r29, r31
    15da:	40 f4       	brcc	.+16     	; 0x15ec <free+0x5a>
    15dc:	4a 81       	ldd	r20, Y+2	; 0x02
    15de:	5b 81       	ldd	r21, Y+3	; 0x03
    15e0:	9e 01       	movw	r18, r28
    15e2:	41 15       	cp	r20, r1
    15e4:	51 05       	cpc	r21, r1
    15e6:	f1 f0       	breq	.+60     	; 0x1624 <free+0x92>
    15e8:	ea 01       	movw	r28, r20
    15ea:	f5 cf       	rjmp	.-22     	; 0x15d6 <free+0x44>
    15ec:	d3 83       	std	Z+3, r29	; 0x03
    15ee:	c2 83       	std	Z+2, r28	; 0x02
    15f0:	40 81       	ld	r20, Z
    15f2:	51 81       	ldd	r21, Z+1	; 0x01
    15f4:	84 0f       	add	r24, r20
    15f6:	95 1f       	adc	r25, r21
    15f8:	c8 17       	cp	r28, r24
    15fa:	d9 07       	cpc	r29, r25
    15fc:	59 f4       	brne	.+22     	; 0x1614 <free+0x82>
    15fe:	88 81       	ld	r24, Y
    1600:	99 81       	ldd	r25, Y+1	; 0x01
    1602:	84 0f       	add	r24, r20
    1604:	95 1f       	adc	r25, r21
    1606:	02 96       	adiw	r24, 0x02	; 2
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	9b 81       	ldd	r25, Y+3	; 0x03
    1610:	93 83       	std	Z+3, r25	; 0x03
    1612:	82 83       	std	Z+2, r24	; 0x02
    1614:	21 15       	cp	r18, r1
    1616:	31 05       	cpc	r19, r1
    1618:	29 f4       	brne	.+10     	; 0x1624 <free+0x92>
    161a:	f0 93 e7 03 	sts	0x03E7, r31	; 0x8003e7 <__flp+0x1>
    161e:	e0 93 e6 03 	sts	0x03E6, r30	; 0x8003e6 <__flp>
    1622:	3d c0       	rjmp	.+122    	; 0x169e <free+0x10c>
    1624:	e9 01       	movw	r28, r18
    1626:	fb 83       	std	Y+3, r31	; 0x03
    1628:	ea 83       	std	Y+2, r30	; 0x02
    162a:	49 91       	ld	r20, Y+
    162c:	59 91       	ld	r21, Y+
    162e:	c4 0f       	add	r28, r20
    1630:	d5 1f       	adc	r29, r21
    1632:	ec 17       	cp	r30, r28
    1634:	fd 07       	cpc	r31, r29
    1636:	61 f4       	brne	.+24     	; 0x1650 <free+0xbe>
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	84 0f       	add	r24, r20
    163e:	95 1f       	adc	r25, r21
    1640:	02 96       	adiw	r24, 0x02	; 2
    1642:	e9 01       	movw	r28, r18
    1644:	99 83       	std	Y+1, r25	; 0x01
    1646:	88 83       	st	Y, r24
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	9b 83       	std	Y+3, r25	; 0x03
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	e0 e0       	ldi	r30, 0x00	; 0
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	12 96       	adiw	r26, 0x02	; 2
    1656:	8d 91       	ld	r24, X+
    1658:	9c 91       	ld	r25, X
    165a:	13 97       	sbiw	r26, 0x03	; 3
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	19 f0       	breq	.+6      	; 0x1666 <free+0xd4>
    1660:	fd 01       	movw	r30, r26
    1662:	dc 01       	movw	r26, r24
    1664:	f7 cf       	rjmp	.-18     	; 0x1654 <free+0xc2>
    1666:	8d 91       	ld	r24, X+
    1668:	9c 91       	ld	r25, X
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	9d 01       	movw	r18, r26
    166e:	2e 5f       	subi	r18, 0xFE	; 254
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__brkval>
    167a:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <__brkval+0x1>
    167e:	28 17       	cp	r18, r24
    1680:	39 07       	cpc	r19, r25
    1682:	69 f4       	brne	.+26     	; 0x169e <free+0x10c>
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	29 f4       	brne	.+10     	; 0x1692 <free+0x100>
    1688:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <__flp+0x1>
    168c:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <__flp>
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <free+0x104>
    1692:	13 82       	std	Z+3, r1	; 0x03
    1694:	12 82       	std	Z+2, r1	; 0x02
    1696:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <__brkval+0x1>
    169a:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <__brkval>
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <strnlen_P>:
    16a4:	fc 01       	movw	r30, r24
    16a6:	05 90       	lpm	r0, Z+
    16a8:	61 50       	subi	r22, 0x01	; 1
    16aa:	70 40       	sbci	r23, 0x00	; 0
    16ac:	01 10       	cpse	r0, r1
    16ae:	d8 f7       	brcc	.-10     	; 0x16a6 <strnlen_P+0x2>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	8e 0f       	add	r24, r30
    16b6:	9f 1f       	adc	r25, r31
    16b8:	08 95       	ret

000016ba <memset>:
    16ba:	dc 01       	movw	r26, r24
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <memset+0x6>
    16be:	6d 93       	st	X+, r22
    16c0:	41 50       	subi	r20, 0x01	; 1
    16c2:	50 40       	sbci	r21, 0x00	; 0
    16c4:	e0 f7       	brcc	.-8      	; 0x16be <memset+0x4>
    16c6:	08 95       	ret

000016c8 <strnlen>:
    16c8:	fc 01       	movw	r30, r24
    16ca:	61 50       	subi	r22, 0x01	; 1
    16cc:	70 40       	sbci	r23, 0x00	; 0
    16ce:	01 90       	ld	r0, Z+
    16d0:	01 10       	cpse	r0, r1
    16d2:	d8 f7       	brcc	.-10     	; 0x16ca <strnlen+0x2>
    16d4:	80 95       	com	r24
    16d6:	90 95       	com	r25
    16d8:	8e 0f       	add	r24, r30
    16da:	9f 1f       	adc	r25, r31
    16dc:	08 95       	ret

000016de <fputc>:
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	fb 01       	movw	r30, r22
    16e8:	23 81       	ldd	r18, Z+3	; 0x03
    16ea:	21 fd       	sbrc	r18, 1
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <fputc+0x16>
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	9f ef       	ldi	r25, 0xFF	; 255
    16f2:	2c c0       	rjmp	.+88     	; 0x174c <fputc+0x6e>
    16f4:	22 ff       	sbrs	r18, 2
    16f6:	16 c0       	rjmp	.+44     	; 0x1724 <fputc+0x46>
    16f8:	46 81       	ldd	r20, Z+6	; 0x06
    16fa:	57 81       	ldd	r21, Z+7	; 0x07
    16fc:	24 81       	ldd	r18, Z+4	; 0x04
    16fe:	35 81       	ldd	r19, Z+5	; 0x05
    1700:	42 17       	cp	r20, r18
    1702:	53 07       	cpc	r21, r19
    1704:	44 f4       	brge	.+16     	; 0x1716 <fputc+0x38>
    1706:	a0 81       	ld	r26, Z
    1708:	b1 81       	ldd	r27, Z+1	; 0x01
    170a:	9d 01       	movw	r18, r26
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	31 83       	std	Z+1, r19	; 0x01
    1712:	20 83       	st	Z, r18
    1714:	8c 93       	st	X, r24
    1716:	26 81       	ldd	r18, Z+6	; 0x06
    1718:	37 81       	ldd	r19, Z+7	; 0x07
    171a:	2f 5f       	subi	r18, 0xFF	; 255
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	37 83       	std	Z+7, r19	; 0x07
    1720:	26 83       	std	Z+6, r18	; 0x06
    1722:	14 c0       	rjmp	.+40     	; 0x174c <fputc+0x6e>
    1724:	8b 01       	movw	r16, r22
    1726:	ec 01       	movw	r28, r24
    1728:	fb 01       	movw	r30, r22
    172a:	00 84       	ldd	r0, Z+8	; 0x08
    172c:	f1 85       	ldd	r31, Z+9	; 0x09
    172e:	e0 2d       	mov	r30, r0
    1730:	09 95       	icall
    1732:	89 2b       	or	r24, r25
    1734:	e1 f6       	brne	.-72     	; 0x16ee <fputc+0x10>
    1736:	d8 01       	movw	r26, r16
    1738:	16 96       	adiw	r26, 0x06	; 6
    173a:	8d 91       	ld	r24, X+
    173c:	9c 91       	ld	r25, X
    173e:	17 97       	sbiw	r26, 0x07	; 7
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	17 96       	adiw	r26, 0x07	; 7
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
    1748:	16 97       	sbiw	r26, 0x06	; 6
    174a:	ce 01       	movw	r24, r28
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <__ultoa_invert>:
    1756:	fa 01       	movw	r30, r20
    1758:	aa 27       	eor	r26, r26
    175a:	28 30       	cpi	r18, 0x08	; 8
    175c:	51 f1       	breq	.+84     	; 0x17b2 <__ultoa_invert+0x5c>
    175e:	20 31       	cpi	r18, 0x10	; 16
    1760:	81 f1       	breq	.+96     	; 0x17c2 <__ultoa_invert+0x6c>
    1762:	e8 94       	clt
    1764:	6f 93       	push	r22
    1766:	6e 7f       	andi	r22, 0xFE	; 254
    1768:	6e 5f       	subi	r22, 0xFE	; 254
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	8f 4f       	sbci	r24, 0xFF	; 255
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	af 4f       	sbci	r26, 0xFF	; 255
    1772:	b1 e0       	ldi	r27, 0x01	; 1
    1774:	3e d0       	rcall	.+124    	; 0x17f2 <__ultoa_invert+0x9c>
    1776:	b4 e0       	ldi	r27, 0x04	; 4
    1778:	3c d0       	rcall	.+120    	; 0x17f2 <__ultoa_invert+0x9c>
    177a:	67 0f       	add	r22, r23
    177c:	78 1f       	adc	r23, r24
    177e:	89 1f       	adc	r24, r25
    1780:	9a 1f       	adc	r25, r26
    1782:	a1 1d       	adc	r26, r1
    1784:	68 0f       	add	r22, r24
    1786:	79 1f       	adc	r23, r25
    1788:	8a 1f       	adc	r24, r26
    178a:	91 1d       	adc	r25, r1
    178c:	a1 1d       	adc	r26, r1
    178e:	6a 0f       	add	r22, r26
    1790:	71 1d       	adc	r23, r1
    1792:	81 1d       	adc	r24, r1
    1794:	91 1d       	adc	r25, r1
    1796:	a1 1d       	adc	r26, r1
    1798:	20 d0       	rcall	.+64     	; 0x17da <__ultoa_invert+0x84>
    179a:	09 f4       	brne	.+2      	; 0x179e <__ultoa_invert+0x48>
    179c:	68 94       	set
    179e:	3f 91       	pop	r19
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	26 9f       	mul	r18, r22
    17a4:	11 24       	eor	r1, r1
    17a6:	30 19       	sub	r19, r0
    17a8:	30 5d       	subi	r19, 0xD0	; 208
    17aa:	31 93       	st	Z+, r19
    17ac:	de f6       	brtc	.-74     	; 0x1764 <__ultoa_invert+0xe>
    17ae:	cf 01       	movw	r24, r30
    17b0:	08 95       	ret
    17b2:	46 2f       	mov	r20, r22
    17b4:	47 70       	andi	r20, 0x07	; 7
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	41 93       	st	Z+, r20
    17ba:	b3 e0       	ldi	r27, 0x03	; 3
    17bc:	0f d0       	rcall	.+30     	; 0x17dc <__ultoa_invert+0x86>
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__ultoa_invert+0x5c>
    17c0:	f6 cf       	rjmp	.-20     	; 0x17ae <__ultoa_invert+0x58>
    17c2:	46 2f       	mov	r20, r22
    17c4:	4f 70       	andi	r20, 0x0F	; 15
    17c6:	40 5d       	subi	r20, 0xD0	; 208
    17c8:	4a 33       	cpi	r20, 0x3A	; 58
    17ca:	18 f0       	brcs	.+6      	; 0x17d2 <__ultoa_invert+0x7c>
    17cc:	49 5d       	subi	r20, 0xD9	; 217
    17ce:	31 fd       	sbrc	r19, 1
    17d0:	40 52       	subi	r20, 0x20	; 32
    17d2:	41 93       	st	Z+, r20
    17d4:	02 d0       	rcall	.+4      	; 0x17da <__ultoa_invert+0x84>
    17d6:	a9 f7       	brne	.-22     	; 0x17c2 <__ultoa_invert+0x6c>
    17d8:	ea cf       	rjmp	.-44     	; 0x17ae <__ultoa_invert+0x58>
    17da:	b4 e0       	ldi	r27, 0x04	; 4
    17dc:	a6 95       	lsr	r26
    17de:	97 95       	ror	r25
    17e0:	87 95       	ror	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	ba 95       	dec	r27
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <__ultoa_invert+0x86>
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	61 05       	cpc	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	08 95       	ret
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	0a 2e       	mov	r0, r26
    17f8:	06 94       	lsr	r0
    17fa:	57 95       	ror	r21
    17fc:	47 95       	ror	r20
    17fe:	37 95       	ror	r19
    1800:	27 95       	ror	r18
    1802:	ba 95       	dec	r27
    1804:	c9 f7       	brne	.-14     	; 0x17f8 <__ultoa_invert+0xa2>
    1806:	62 0f       	add	r22, r18
    1808:	73 1f       	adc	r23, r19
    180a:	84 1f       	adc	r24, r20
    180c:	95 1f       	adc	r25, r21
    180e:	a0 1d       	adc	r26, r0
    1810:	08 95       	ret

00001812 <__prologue_saves__>:
    1812:	2f 92       	push	r2
    1814:	3f 92       	push	r3
    1816:	4f 92       	push	r4
    1818:	5f 92       	push	r5
    181a:	6f 92       	push	r6
    181c:	7f 92       	push	r7
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	ca 1b       	sub	r28, r26
    183c:	db 0b       	sbc	r29, r27
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	09 94       	ijmp

0000184a <__epilogue_restores__>:
    184a:	2a 88       	ldd	r2, Y+18	; 0x12
    184c:	39 88       	ldd	r3, Y+17	; 0x11
    184e:	48 88       	ldd	r4, Y+16	; 0x10
    1850:	5f 84       	ldd	r5, Y+15	; 0x0f
    1852:	6e 84       	ldd	r6, Y+14	; 0x0e
    1854:	7d 84       	ldd	r7, Y+13	; 0x0d
    1856:	8c 84       	ldd	r8, Y+12	; 0x0c
    1858:	9b 84       	ldd	r9, Y+11	; 0x0b
    185a:	aa 84       	ldd	r10, Y+10	; 0x0a
    185c:	b9 84       	ldd	r11, Y+9	; 0x09
    185e:	c8 84       	ldd	r12, Y+8	; 0x08
    1860:	df 80       	ldd	r13, Y+7	; 0x07
    1862:	ee 80       	ldd	r14, Y+6	; 0x06
    1864:	fd 80       	ldd	r15, Y+5	; 0x05
    1866:	0c 81       	ldd	r16, Y+4	; 0x04
    1868:	1b 81       	ldd	r17, Y+3	; 0x03
    186a:	aa 81       	ldd	r26, Y+2	; 0x02
    186c:	b9 81       	ldd	r27, Y+1	; 0x01
    186e:	ce 0f       	add	r28, r30
    1870:	d1 1d       	adc	r29, r1
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	ed 01       	movw	r28, r26
    187e:	08 95       	ret

00001880 <_exit>:
    1880:	f8 94       	cli

00001882 <__stop_program>:
    1882:	ff cf       	rjmp	.-2      	; 0x1882 <__stop_program>
